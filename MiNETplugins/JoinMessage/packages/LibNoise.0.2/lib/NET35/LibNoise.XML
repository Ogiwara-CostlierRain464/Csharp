<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibNoise</name>
    </assembly>
    <members>
        <member name="T:LibNoise.Builder.FilterLevel">
            <summary>
            Filter level.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.FilterLevel.Constant">
            <summary>
            Caller should use Constant property.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.FilterLevel.Source">
            <summary>
            Caller should use source module value.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.FilterLevel.Filter">
            <summary>
            Caller should use FilterValue method.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.IBuilderFilter">
            <summary>
            Interface for builder filter.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.IBuilderFilter.FilterValue(System.Int32,System.Int32,System.Single)">
            <summary>Filter value.</summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="source">The source.</param>
            <returns>Filtered value.</returns>
        </member>
        <member name="M:LibNoise.Builder.IBuilderFilter.IsFiltered(System.Int32,System.Int32)">
            <summary>Is filtered.</summary>
            <param name="x">The X.</param>
            <param name="y">The Y.</param>
            <returns>Filter level.</returns>
        </member>
        <member name="P:LibNoise.Builder.IBuilderFilter.ConstantValue">
            <summary>
            Gets or sets constant value.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.NoiseMap">
            <summary>
            Implements a noise map, a 2-dimensional array of floating-point values.
            A noise map is designed to store coherent-noise values generated by a
            noise module, although it can store values from any source.  A noise
            map is often used as a terrain height map or a grayscale texture. 
            </summary>
        </member>
        <member name="T:LibNoise.Utils.DataMap`1">
             <summary>
             Abstract base class for a map of data, a 2-dimensional array of data, 
             designed to store values from any source.
            
             The size (width and height) of the map can be specified during
             object construction or at any other time.
            
             The GetValue() and SetValue() methods can be used to access individual
             values stored in the map.
            
             If you specify a new size for the map and the new size is
             smaller than the current size, the allocated memory will not be
             reallocated.
             Call ReclaimMem() to reclaim the wasted memory.
            
             <b>Border Values</b>
            
             All of the values outside of the map are assumed to have a
             common value known as the <i>border value</i>.
            
             To set the border value, call the BorderValue properties.
            
             The GetValue() method returns the border value if the specified value
             lies outside of the map.
            
             <b>Internal Noise Map Structure</b>
            
             Internally, the values are organized into horizontal rows called
             slabs.  Slabs are ordered from bottom to top.
            
             Each slab contains a contiguous row of values in memory.  The values
             in a slab are organized left to right.
            
             The offset between the starting points of any two adjacent slabs is
             called the <i>stride amount</i>.  The stride amount is measured by
             the number of values between these two starting points.
             
             </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._data">
            <summary>
            The noise map buffer.
            </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._height">
            <summary>
            The height of the map.
            </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._maxHeight">
            <summary>
            Maximum height.
            </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._maxWidth">
            <summary>
            Maximum width.
            </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._memoryUsage">
            <summary>
            The memory used (bits) for this map.
            </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._stride">
            <summary>
            The stride amount of the map.
            </summary>
        </member>
        <member name="F:LibNoise.Utils.DataMap`1._width">
            <summary>
            The width of the map.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.#ctor">
            <summary>
            Create an empty map.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.#ctor(System.Int32,System.Int32)">
             <summary>
             Create a new map with the given values
            
             The width and height values are positive.
             The width and height values do not exceed the maximum
             possible width and height for the map.
            
             @throw System.ArgumentException See the preconditions.
             @throw noise::ExceptionOutOfMemory Out of memory.
            
             Creates a map with uninitialized values.
            
             It is considered an error if the specified dimensions are not
             positive.
             </summary>
             <param name="width">The width of the new map.</param>
             <param name="height">The height of the new map</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.#ctor(LibNoise.Utils.DataMap{`0})">
            <summary>
            Copy constructor
            @throw noise::ExceptionOutOfMemory Out of memory.
            </summary>
            <param name="copy">The map to copy</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.GetSlab(System.Int32)">
            <summary>
            Returns a copy of a slab.
            This method returns slab filled with the borderValue 
            if the coordinates exist outside the map.
            </summary>
            <param name="y">The y coordinate of the position.</param>
            <returns>The slab at that position.</returns>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.GetValue(System.Int32,System.Int32)">
             <summary>
             Returns a value from the specified position in the noise map.
            
             This method returns the border value if the coordinates exist
             outside of the noise map.
             </summary>
             <param name="x">The x coordinate of the position.</param>
             <param name="y">The y coordinate of the position.</param>
             <returns>The value at that position.</returns>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.SetValue(System.Int32,System.Int32,`0)">
             <summary>
             Sets a value at a specified position in the map.
            
             This method does nothing if the map object is empty or the
             position is outside the bounds of the noise map.
             </summary>
             <param name="x">The x coordinate of the position.</param>
             <param name="y">The y coordinate of the position.</param>
             <param name="value">The value to set at the given position.</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.SetSize(System.Int32,System.Int32)">
             <summary>
             Sets the new size for the map.
             
             @pre The width and height values are positive.
             @pre The width and height values do not exceed the maximum
             possible width and height for the map.
            
             @throw ArgumentException See the preconditions, the noise map is
             unmodified.
             
             </summary>
             <param name="width">width The new width for the map.</param>
             <param name="height">height The new height for the map.</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.CopyFrom(LibNoise.Utils.DataMap{`0})">
            <summary>
            Copies the contents of the buffer in the source map into
            this map, considering source is a trusted source.
            </summary>
            <param name="source">The source map.</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.CopyTo(LibNoise.Utils.DataMap{`0})">
            <summary>
            Copies up to width * height cells from internal data buffer into the data buffer of the given map
            This method use dest.CopyFrom(<see cref="T:LibNoise.Utils.DataMap`1"/> source) where sours is the current object.
            </summary>
            <param name="dest">The destination map.</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.CopyTo(`0[]@)">
            <summary>
            Copies up to width * height cells from internal data buffer into the given buffer.
            </summary>
            <param name="buffer">The destination buffer.</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.Share">
            <summary>
            Share the internal buffer.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.Reset">
            <summary>
            Resets the map object.
            This method is similar to the SetSize(0, 0)
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.DeleteAndReset">
            <summary>
            Resets the map object.
            This method is similar to SetSize(0, 0) or Reset(), except this method
            also deletes the buffer.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.ReclaimMemory">
            <summary>
            Reallocates the map to recover wasted memory.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.Clear(`0)">
            <summary>
            Clears the map to a specified value.
            This method is a O(n) operation, where  n is equal to width * height.
            </summary>
            <param name="value">The value that all positions within the map are cleared to.</param>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.Clear">
            <summary>
            Clears the map to a 0 value.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.SizeofT">
            <summary>
            Return the memory size of the type of data.
            Children must implement this method to calculate the memory usage.
            </summary>
            <returns>The memory size of the type of data.</returns>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.MinvalofT">
            <summary>
            Return the minimum value of the type of data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.MaxvalofT">
            <summary>
            Return the maximum value of the type of data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.AllocateBuffer">
            <summary>
            Allocate a buffer.
            </summary>
        </member>
        <member name="M:LibNoise.Utils.DataMap`1.AllocateBuffer(System.Int32,System.Int32)">
            <summary>
            Allocate a buffer, assuming width and height are correct values @see SetSize(int, int). 
            </summary>
            <param name="width">Width The new width.</param>
            <param name="height">Height The new height.</param>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.Width">
            <summary>
            Gets the width of the map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.Height">
            <summary>
            Getsthe height of the map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.Stride">
            <summary>
            The stride amount of the map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.BorderValue">
            <summary>
            Gets or sets the value used for all positions outside of the map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.MemoryUsage">
            <summary>
            Gets the memory used (bits) for this map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.MemoryUsageKb">
            <summary>
            Gets the memory used (in Kb) for this map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.MemoryUsageMo">
            <summary>
            Gets the memory used (in Kb) for this map.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.MaxHeight">
            <summary>
            Max height.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.MaxWidth">
            <summary>
            Maximum width.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.HasMaxDimension">
            <summary>
            Has maximum dimension.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.CellsCount">
            <summary>
            Cells count.
            </summary>
        </member>
        <member name="P:LibNoise.Utils.DataMap`1.Data">
            <summary>
            The noise map buffer.
            </summary>
        </member>
        <member name="T:LibNoise.IMap2D`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibNoise.IMap2D`1.GetValue(System.Int32,System.Int32)">
             <summary>
             Returns a value from the specified position in the noise map.
            
             This method returns the border value if the coordinates exist
             outside of the noise map.
             </summary>
             <param name="x">The x coordinate of the position</param>
             <param name="y">The y coordinate of the position</param>
             <returns>The value at that position</returns>
        </member>
        <member name="M:LibNoise.IMap2D`1.SetValue(System.Int32,System.Int32,`0)">
             <summary>
             Sets a value at a specified position in the map.
            
             This method does nothing if the map object is empty or the
             position is outside the bounds of the noise map.
             </summary>
             <param name="x">The x coordinate of the position</param>
             <param name="y">The y coordinate of the position</param>
             <param name="value">The value to set at the given position</param>
        </member>
        <member name="M:LibNoise.IMap2D`1.SetSize(System.Int32,System.Int32)">
             <summary>
             Sets the new size for the map.
             
             @pre The width and height values are positive.
             @pre The width and height values do not exceed the maximum
             possible width and height for the map.
            
             @throw ArgumentException See the preconditions, the noise map is
             unmodified.
             
             </summary>
             <param name="width">width The new width for the map</param>
             <param name="height">height The new height for the map</param>
        </member>
        <member name="M:LibNoise.IMap2D`1.Reset">
            <summary>
            Resets the map object.
            This method is similar to the SetSize(0, 0)
            </summary>
        </member>
        <member name="M:LibNoise.IMap2D`1.Clear(`0)">
            <summary>
            Clears the map to a specified value.
            This method is a O(n) operation, where n is equal to width * height.
            </summary>
            <param name="value">The value that all positions within the map are cleared to.</param>
        </member>
        <member name="M:LibNoise.IMap2D`1.Clear">
            <summary>
            Clears the map to a 0 value
            </summary>
        </member>
        <member name="M:LibNoise.IMap2D`1.MinMax(`0@,`0@)">
            <summary>
            Find the lowest and highest value in the map
            </summary>
            <param name="min">the lowest value</param>
            <param name="max">the highest value</param>
        </member>
        <member name="P:LibNoise.IMap2D`1.Width">
            <summary>
            Gets the width of the map
            </summary>
        </member>
        <member name="P:LibNoise.IMap2D`1.Height">
            <summary>
            Gets the height of the map
            </summary>
        </member>
        <member name="P:LibNoise.IMap2D`1.BorderValue">
            <summary>
            Gets or sets the value used for all positions outside of the map.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.#ctor">
            <summary>
            Create an empty NoiseMap.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new NoiseMap with the given values
            The width and height values are positive.
            The width and height values do not exceed the maximum
            possible width and height for the noise map.
            @throw System.ArgumentException See the preconditions.
            @throw noise::ExceptionOutOfMemory Out of memory.
            Creates a noise map with uninitialized values.
            It is considered an error if the specified dimensions are not
            positive.
            </summary>
            <param name="width">The width of the new noise map.</param>
            <param name="height">The height of the new noise map.</param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.#ctor(LibNoise.Builder.NoiseMap)">
            <summary>
            Copy constructor
            @throw noise::ExceptionOutOfMemory Out of memory.
            </summary>
            <param name="copy">The NoiseMap to copy.</param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.MinMax(System.Single@,System.Single@)">
            <summary>
            Find the lowest and highest value in the map
            </summary>
            <param name="min">the lowest value</param>
            <param name="max">the highest value</param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.SizeofT">
            <summary>
            Return the memory size of a float.
            </summary>
            <returns>The memory size of a float.</returns>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.MaxvalofT">
            <summary>
            Return the maximum value of a float type.
            </summary>
            <returns>Maximum value.</returns>
        </member>
        <member name="M:LibNoise.Builder.NoiseMap.MinvalofT">
            <summary>
            Return the minimum value of a float type.
            </summary>
            <returns>Mimum value.</returns>
        </member>
        <member name="T:LibNoise.Builder.NoiseMapBuilderCallback">
             A delegate to a callback function used by the NoiseMapBuilder class.
            
             The NoiseMapBuilder::Build() method calls this callback function each
             time it fills a row of the noise map with coherent-noise values.
            
             This callback function has a single integer parameter that contains
             a count of the rows that have been completed.  It returns void.  Pass
             a function with this signature to the NoiseMapBuilder::SetCallback()
             method.
        </member>
        <member name="T:LibNoise.Builder.NoiseMapBuilder">
             <summary>
             Abstract base class for a noise-map builder
            
             A builder class builds a noise map by filling it with coherent-noise
             values generated from the surface of a three-dimensional mathematical
             object.  Each builder class defines a specific three-dimensional
             surface, such as a cylinder, sphere, or plane.
            
             A builder class describes these input values using a coordinate system
             applicable for the mathematical object (e.g., a latitude/longitude
             coordinate system for the spherical noise-map builder.)  It then
             "flattens" these coordinates onto a plane so that it can write the
             coherent-noise values into a two-dimensional noise map.
            
             <b>Building the Noise Map</b>
            
             To build the noise map, perform the following steps:
             - Pass the bounding coordinates to the SetBounds() method.
             - Pass the noise map size, in points, to the SetDestSize() method.
             - Pass a NoiseMap object to the SetDestNoiseMap() method.
             - Pass a noise module (derived from Noise.Module) to the
               SetSourceModule() method.
             - Call the Build() method.
            
             You may also pass a callback function to the SetCallback() method.
             The Build() method calls this callback function each time it fills a
             row of the noise map with coherent-noise values.  This callback
             function has a single integer parameter that contains a count of the
             rows that have been completed.  It returns void.
            
             Note that SetBounds() is not defined in the abstract base class; it is
             only defined in the derived classes.  This is because each model uses
             a different coordinate system.
             </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilder.PCallBack">
            <summary>
            The callback function that Build() calls each time it fills a
            row of the noise map with coherent-noise values.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilder.PFilter">
            <summary>
            Filter.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilder.PHeight">
            <summary>
            The height of the map.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilder.PNoiseMap">
            <summary>
            The destination noise map that will contain the coherent-noise values.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilder.PSourceModule">
            <summary>
            The source input module.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilder.PWidth">
            <summary>
            The width of the map.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilder.Build">
             <summary>
             Builds the noise map.
            
             @pre SetBounds() was previously called.
             @pre NoiseMap was previously defined.
             @pre a SourceModule was previously defined.
             @pre The width and height values specified by SetSize() are
             positive.
             @pre The width and height values specified by SetSize() do not
             exceed the maximum possible width and height for the noise map.
            
             @post The original contents of the destination noise map is
             destroyed.
            
             @throw noise::ArgumentException See the preconditions.
            
             If this method is successful, the destination noise map contains
             the coherent-noise values from the noise module specified by
             the SourceModule.
             </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilder.SetSize(System.Int32,System.Int32)">
             <summary>
             Sets the new size for the destination noise map.
             This method does not change the size of the destination noise map
             until the Build() method is called.
             
             @pre The width and height values are positive.
            
             @throw ArgumentException See the preconditions.
             
             </summary>
             <param name="width">width The new width for the destination noise map.</param>
             <param name="height">height The new height for the destination noise map.</param>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilder.SourceModule">
            <summary>
            Gets or sets the source module.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilder.NoiseMap">
            <summary>
            Gets or sets the noise map.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilder.CallBack">
            <summary>
            Gets or sets the callback function.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilder.Width">
            <summary>
            Gets the width of the NoiseMap.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilder.Height">
            <summary>
            Gets the height of the NoiseMap.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilder.Filter">
            <summary>
            Filter.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.NoiseMapBuilderCylinder">
             <summary>
             Builds a cylindrical noise map.
            
             This class builds a noise map by filling it with coherent-noise values
             generated from the surface of a cylinder.
            
             This class describes these input values using an (angle, height)
             coordinate system.  After generating the coherent-noise value from the
             input value, it then "flattens" these coordinates onto a plane so that
             it can write the values into a two-dimensional noise map.
            
             The cylinder model has a radius of 1.0 unit and has infinite height.
             The cylinder is oriented along the y axis.  Its center is at the
             origin.
            
             The x coordinate in the noise map represents the angle around the
             cylinder's y axis.  The y coordinate in the noise map represents the
             height above the x-z plane.
            
             The application must provide the lower and upper angle bounds of the
             noise map, in degrees, and the lower and upper height bounds of the
             noise map, in units.
             </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderCylinder._lowerAngleBound">
            <summary>
            Lower Angle boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderCylinder._lowerHeightBound">
            <summary>
            Lower Height boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderCylinder._upperAngleBound">
            <summary>
            Upper Angle boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderCylinder._upperHeightBound">
            <summary>
            Upper Height boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderCylinder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderCylinder.SetBounds(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Sets the boundaries of the planar noise map.
            
             @pre The lower Angle boundary is less than the upper Angle boundary.
             @pre The lower Height boundary is less than the upper Height boundary.
            
             @throw ArgumentException See the preconditions.
             </summary>
             <param name="lowerAngleBound">The lower Angle boundary of the noise map, in units.</param>
             <param name="upperAngleBound">The upper Angle boundary of the noise map, in units.</param>
             <param name="lowerHeightBound">The lower Height boundary of the noise map, in units.</param>
             <param name="upperHeightBound">The upper Height boundary of the noise map, in units.</param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderCylinder.Build">
             <summary>
             Builds the noise map.
            
             @pre SetBounds() was previously called.
             @pre NoiseMap was previously defined.
             @pre a SourceModule was previously defined.
             @pre The width and height values specified by SetSize() are
             positive.
             @pre The width and height values specified by SetSize() do not
             exceed the maximum possible width and height for the noise map.
            
             @post The original contents of the destination noise map is
             destroyed.
            
             @throw noise::ArgumentException See the preconditions.
            
             If this method is successful, the destination noise map contains
             the coherent-noise values from the noise module specified by
             the SourceModule.
             </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderCylinder.LowerHeightBound">
            <summary>
            Gets the lower Height boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderCylinder.LowerAngleBound">
            <summary>
            Gets the lower Angle boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderCylinder.UpperAngleBound">
            <summary>
            Gets the upper Angle boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderCylinder.UpperHeightBound">
            <summary>
            Gets the upper Height boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.NoiseMapBuilderPlane">
             <summary>
             Builds a planar noise map.
            
             This class builds a noise map by filling it with coherent-noise values
             generated from the surface of a plane.
            
             This class describes these input values using (x, z) coordinates.
             Their y coordinates are always 0.0.
            
             The application must provide the lower and upper x coordinate bounds
             of the noise map, in units, and the lower and upper z coordinate
             bounds of the noise map, in units.
            
             To make a tileable noise map with no seams at the edges, use the 
             Seamless property.
             </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderPlane._lowerXBound">
            <summary>
            Lower x boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderPlane._lowerZBound">
            <summary>
            Lower z boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderPlane._seamless">
            <summary>
            A flag specifying whether seamless tiling is enabled.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderPlane._upperXBound">
            <summary>
            Upper x boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderPlane._upperZBound">
            <summary>
            Upper z boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderPlane.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderPlane.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
             <summary>
             Create a new plane with given value.
            
             @pre The lower x boundary is less than the upper x boundary.
             @pre The lower z boundary is less than the upper z boundary.
            
             @throw ArgumentException See the preconditions.
             </summary>
             <param name="lowerXBound">The lower x boundary of the noise map, in units.</param>
             <param name="upperXBound">The upper x boundary of the noise map, in units.</param>
             <param name="lowerZBound">The lower z boundary of the noise map, in units.</param>
             <param name="upperZBound">The upper z boundary of the noise map, in units.</param>
             <param name="seamless">a flag specifying whether seamless tiling is enabled.</param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderPlane.SetBounds(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Sets the boundaries of the planar noise map.
            
             @pre The lower x boundary is less than the upper x boundary.
             @pre The lower z boundary is less than the upper z boundary.
            
             @throw ArgumentException See the preconditions.
             </summary>
             <param name="lowerXBound">The lower x boundary of the noise map, in units.</param>
             <param name="upperXBound">The upper x boundary of the noise map, in units.</param>
             <param name="lowerZBound">The lower z boundary of the noise map, in units.</param>
             <param name="upperZBound">The upper z boundary of the noise map, in units.</param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderPlane.Build">
             <summary>
             Builds the noise map.
            
             @pre SetBounds() was previously called.
             @pre NoiseMap was previously defined.
             @pre a SourceModule was previously defined.
             @pre The width and height values specified by SetSize() are
             positive.
             @pre The width and height values specified by SetSize() do not
             exceed the maximum possible width and height for the noise map.
            
             @post The original contents of the destination noise map is
             destroyed.
            
             @throw noise::ArgumentException See the preconditions.
            
             If this method is successful, the destination noise map contains
             the coherent-noise values from the noise module specified by
             the SourceModule.
             </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderPlane.Seamless">
            <summary>
            Gets or sets a flag specifying whether seamless tiling is enabled.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderPlane.LowerXBound">
            <summary>
            Gets the lower x boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderPlane.LowerZBound">
            <summary>
            Gets the lower z boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderPlane.UpperXBound">
            <summary>
            Gets the upper x boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderPlane.UpperZBound">
            <summary>
            Gets the upper z boundary of the planar noise map, in units.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.NoiseMapBuilderSphere">
             <summary>
             Builds a spherical noise map.
            
             This class builds a noise map by filling it with coherent-noise values
             generated from the surface of a sphere.
            
             This class describes these input values using a (latitude, longitude)
             coordinate system.  After generating the coherent-noise value from the
             input value, it then "flattens" these coordinates onto a plane so that
             it can write the values into a two-dimensional noise map.
            
             The sphere model has a radius of 1.0 unit.  Its center is at the
             origin.
            
             The x coordinate in the noise map represents the longitude.  The y
             coordinate in the noise map represents the latitude.  
            
             The application must provide the southern, northern, western, and
             eastern bounds of the noise map, in degrees.
             </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderSphere._eastLonBound">
            <summary>
            Eastern boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderSphere._northLatBound">
            <summary>
            Northern boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderSphere._southLatBound">
            <summary>
            Southern boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.NoiseMapBuilderSphere._westLonBound">
            <summary>
            Western boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderSphere.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderSphere.SetBounds(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Sets the coordinate boundaries of the noise map.
            
             @pre The southern boundary is less than the northern boundary.
             @pre The western boundary is less than the eastern boundary.
             </summary>
             <param name="southLatBound"></param>
             <param name="northLatBound"></param>
             <param name="westLonBound"></param>
             <param name="eastLonBound"></param>
        </member>
        <member name="M:LibNoise.Builder.NoiseMapBuilderSphere.Build">
             <summary>
             Builds the noise map.
            
             @pre SetBounds() was previously called.
             @pre NoiseMap was previously defined.
             @pre a SourceModule was previously defined.
             @pre The width and height values specified by SetSize() are
             positive.
             @pre The width and height values specified by SetSize() do not
             exceed the maximum possible width and height for the noise map.
            
             @post The original contents of the destination noise map is
             destroyed.
            
             @throw noise::ArgumentException See the preconditions.
            
             If this method is successful, the destination noise map contains
             the coherent-noise values from the noise module specified by
             the SourceModule.
             </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderSphere.EastLonBound">
            <summary>
            Gets the eastern boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderSphere.NorthLatBound">
            <summary>
            Gets the northern boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderSphere.SouthLatBound">
            <summary>
            Gets the southern boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="P:LibNoise.Builder.NoiseMapBuilderSphere.WestLonBound">
            <summary>
            Gets the western boundary of the spherical noise map, in degrees.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.ShapeFilter">
            <summary>
            Shape filter.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.ShapeFilter.DefaultValue">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:LibNoise.Builder.ShapeFilter.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Builder.ShapeFilter.Constant">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Builder.ShapeFilter.PShape">
            <summary>
            The shape image
            </summary>
        </member>
        <member name="M:LibNoise.Builder.ShapeFilter.IsFiltered(System.Int32,System.Int32)">
            <summary>
            Return the filter level at this position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Builder.ShapeFilter.FilterValue(System.Int32,System.Int32,System.Single)">
            <summary>
            Filter value.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="source">Source.</param>
            <returns>Filtered value.</returns>
        </member>
        <member name="M:LibNoise.Builder.ShapeFilter.GetGreyscaleLevel(System.Int32,System.Int32)">
            <summary>
            Get greyscale level.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <returns>Value.</returns>
        </member>
        <member name="P:LibNoise.Builder.ShapeFilter.Shape">
            <summary>
            Gets or sets the shape image
            </summary>
        </member>
        <member name="P:LibNoise.Builder.ShapeFilter.ConstantValue">
            <summary>
            the constant output value.
            </summary>
        </member>
        <member name="T:LibNoise.Builder.ShapeFilter.LevelCache">
            <summary>
            A simple 2d-coordinates struct used as a cached value
            </summary>
        </member>
        <member name="F:LibNoise.Builder.ShapeFilter.LevelCache.Level">
            <summary>
            Level.
            </summary>
        </member>
        <member name="M:LibNoise.Builder.ShapeFilter.LevelCache.#ctor(System.Int32,System.Int32,System.Byte)">
            <summary>
            Default constructor.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="level">Level.</param>
        </member>
        <member name="M:LibNoise.Builder.ShapeFilter.LevelCache.IsCached(System.Int32,System.Int32)">
            <summary>
            IsCached.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:LibNoise.Builder.ShapeFilter.LevelCache.Update(System.Int32,System.Int32,System.Byte)">
            <summary>
            Update.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="level">Level.</param>
        </member>
        <member name="T:LibNoise.CombinerModule">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibNoise.IModule">
             <summary>
             Abstract interface for noise modules.
            
             A <i>noise module</i> is an object that calculates and outputs a value
             given a N-dimensional input value.
            
             Each type of noise module uses a specific method to calculate an
             output value.  Some of these methods include:
            
             - Calculating a value using a coherent-noise function or some other
               mathematical function.
             - Mathematically changing the output value from another noise module
               in various ways.
             - Combining the output values from two noise modules in various ways.
            
             </summary>
        </member>
        <member name="F:LibNoise.CombinerModule._leftModule">
            <summary>
            The left input module
            </summary>
        </member>
        <member name="F:LibNoise.CombinerModule._rightModule">
            <summary>
            The right input module
            </summary>
        </member>
        <member name="P:LibNoise.CombinerModule.LeftModule">
            <summary>
            Gets or sets the left module
            </summary>
        </member>
        <member name="P:LibNoise.CombinerModule.RightModule">
            <summary>
            Gets or sets the right module
            </summary>
        </member>
        <member name="T:LibNoise.Combiner.Add">
            <summary>
            Noise module that outputs the sum of the two output values from two source modules.
            </summary>
        </member>
        <member name="T:LibNoise.IModule3D">
            <summary>
            Abstract interface for noise modules that calculates and outputs a value
            given a three-dimensional input value.
            </summary>
        </member>
        <member name="M:LibNoise.IModule3D.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Combiner.Add.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Combiner.Max">
            <summary>
            Noise module that outputs the larger of the two output values from two
            source modules.
            </summary>
        </member>
        <member name="M:LibNoise.Combiner.Max.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Combiner.Min">
            <summary>
            Noise module that outputs the smaller of the two output values from
            two source modules.
            </summary>
        </member>
        <member name="M:LibNoise.Combiner.Min.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Combiner.Multiply">
            <summary>
            Noise module that outputs the product of the two output values from
            two source modules.
            </summary>
        </member>
        <member name="M:LibNoise.Combiner.Multiply.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Combiner.Power">
            <summary>
            Noise module that raises the output value from the left source module
            to the power of the output value from the right source module.
            </summary>
        </member>
        <member name="M:LibNoise.Combiner.Power.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Combiner.Substract">
            <summary>
            Noise module that outputs the subtraction between the left module and the right module .
            </summary>
        </member>
        <member name="M:LibNoise.Combiner.Substract.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.FilterModule">
            <summary>
            Base class for all filter module
            
            Provides some commons or usefull properties and constants
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.DEFAULT_FREQUENCY">
            <summary>
            Default frequency for the noise module.
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.DEFAULT_LACUNARITY">
            <summary>
            Default lacunarity for the noise module.
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.DEFAULT_OCTAVE_COUNT">
            <summary>
            Default number of octaves for the noise module.
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.MAX_OCTAVE">
            <summary>
            Maximum number of octaves for a noise module.
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.DEFAULT_OFFSET">
            <summary>
            Default offset
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.DEFAULT_GAIN">
            <summary>
            Default gain
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule.DEFAULT_SPECTRAL_EXPONENT">
            <summary>
            Default spectral exponent
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._frequency">
            <summary>
            Frequency of the first octave
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._lacunarity">
             <summary>
             The lacunarity specifies the frequency multipler between successive
             octaves.
            
             The effect of modifying the lacunarity is subtle; you may need to play
             with the lacunarity value to determine the effects.  For best results,
             set the lacunarity to a number between 1.5 and 3.5.
             </summary>
        </member>
        <member name="F:LibNoise.FilterModule._octaveCount">
             <summary>
             The number of octaves control the <i>amount of detail</i> of the
             noise.  Adding more octaves increases the detail of the 
             noise, but with the drawback of increasing the calculation time.
            
             An octave is one of the coherent-noise functions in a series of
             coherent-noise functions that are added together to form noise.
            
             </summary>
        </member>
        <member name="F:LibNoise.FilterModule._offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._source1D">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._source2D">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._source3D">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._source4D">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._spectralExponent">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.FilterModule._spectralWeights">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibNoise.FilterModule.#ctor">
            <summary>
            Template default constructor
            </summary>
        </member>
        <member name="M:LibNoise.FilterModule.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Template constructor
            </summary>
            <param name="frequency"></param>
            <param name="lacunarity"></param>
            <param name="exponent"></param>
            <param name="octaveCount"></param>
        </member>
        <member name="M:LibNoise.FilterModule.ComputeSpectralWeights">
            <summary>
            Calculates the spectral weights for each octave.
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Frequency">
            <summary>
            Gets or sets the frequency
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Lacunarity">
            <summary>
            Gets or sets the lacunarity
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.OctaveCount">
            <summary>
            Gets or sets the number of octaves 
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Offset">
            <summary>
            Gets or sets the offset
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Gain">
            <summary>
            Gets or sets the gain
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.SpectralExponent">
            <summary>
            Gets or sets the spectralExponent
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Primitive4D">
            <summary>
            Gets or sets the primitive 4D
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Primitive3D">
            <summary>
            Gets or sets the primitive 3D
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Primitive2D">
            <summary>
            Gets or sets the primitive 2D
            </summary>
        </member>
        <member name="P:LibNoise.FilterModule.Primitive1D">
            <summary>
            Gets or sets the primitive 1D
            </summary>
        </member>
        <member name="T:LibNoise.Filter.Billow">
             <summary>
             Noise module that outputs three-dimensional "billowy" noise
             Hit snoise is also known as Turbulence fBM and generates "billowy" 
             noise suitable for clouds and rocks.
            
             This noise module is nearly identical to SumFractal except
             this noise module modifies each octave with an absolute-value
             function. Optionally, a scaling factor and a bias addition can be applied 
             each octave.
             
             The original noise::module::billow has scale of 2 and a bias of -1.
             </summary>
        </member>
        <member name="T:LibNoise.IModule2D">
            <summary>
            Abstract interface for noise modules that calculates and outputs a value
            given a two-dimensional input value.
            </summary>
        </member>
        <member name="M:LibNoise.IModule2D.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="F:LibNoise.Filter.Billow.DefaultScale">
            <summary>
            Default scale
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Filter.Billow.DefaultBias">
            <summary>
            Default bias
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Filter.Billow.PBias">
            <summary>
            the bias to apply to the scaled output value from the source module.
            </summary>
        </member>
        <member name="F:LibNoise.Filter.Billow.PScale">
            <summary>
            the scaling factor to apply to the output value from the source module.
            </summary>
        </member>
        <member name="M:LibNoise.Filter.Billow.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.Billow.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Filter.Billow.Scale">
            <summary>
            Gets or sets the scale value.
            </summary>
        </member>
        <member name="P:LibNoise.Filter.Billow.Bias">
            <summary>
            Gets or sets the bias value.
            </summary>
        </member>
        <member name="T:LibNoise.Filter.HeterogeneousMultiFractal">
             <summary>
             Noise module that outputs 3-dimensional Heterogeneous-multifractal noise.
            
             Heterogeneous multifractal is similar to multifractal; the single perturbation is computed as follows: 
             offset is first added to gradient noise and then the result is multiplied to the i-th spectral weight. 
             The result is, in turn, multiplied with the current noise value. Perturbations are then combined additively. 
             The overall result is a soft version of multifractal algorithm, where slopes are less pronounced.
             (From http://meshlab.sourceforge.net/wiki/index.php/Fractal_Creation )
             
             This noise module outputs values that usually range from offset to offset *2.5, 
             but there are no guarantees that all output values will exist within that range.
             </summary>
        </member>
        <member name="M:LibNoise.Filter.HeterogeneousMultiFractal.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.HeterogeneousMultiFractal.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.HybridMultiFractal">
             <summary>
             Noise module that outputs 3-dimensional hybrid-multifractal noise.
            
             Hybrid-multifractal noise the perturbations are combined additively, 
             but the single perturbation is computed by multiplying two quantities 
             called weight and signal. The signal quantity is the standard multifractal 
             perturbation, and the weight quantity is the multiplicative combination 
             of all the previous signal quantities.
            
             Hybrid-multifractal attempts to control the amount of details according
             to the slope of the underlying overlays. Hybrid Multifractal  is 
             conventionally used to generate terrains with smooth valley areas and 
             rough peaked mountains. With high Lacunarity values, it tends to produce 
             embedded plateaus. 
             
             Some good parameter values to start with:
            		gain = 1.0;
            		offset = 0.7;
            		spectralExponent = 0.25;
             
             </summary>
        </member>
        <member name="M:LibNoise.Filter.HybridMultiFractal.#ctor">
            <summary>
            0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.Filter.HybridMultiFractal.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.HybridMultiFractal.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.MultiFractal">
             <summary>
             Noise module that outputs 3-dimensional MultiFractal noise.
            
             The multifractal algorithm differs from the Fractal brownian motion in that perturbations are combined 
             multiplicatively and introduces an offset parameter. The perturbation at each frequency is computed as 
             in the fBM algorithm, but offset is finally added to the value. 
             The role of offset is to emphasize the final perturbation value. 
             Multiplicative combination of perturbation, in turn, emphasizes the "mountain-like-aspect" of the landscape, 
             so that between mountains a sort of slopes are generated
             (From http://meshlab.sourceforge.net/wiki/index.php/Fractal_Creation )
             </summary>
        </member>
        <member name="M:LibNoise.Filter.MultiFractal.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.MultiFractal.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.Pipe">
            <summary>
            Noise module that outputs the input source value without modification.
            Just a convenient class for any purpose.
            </summary>
        </member>
        <member name="T:LibNoise.IModule4D">
            <summary>
            Abstract interface for noise modules that calculates and outputs a value
            given a four-dimensional input value.
            </summary>
        </member>
        <member name="M:LibNoise.IModule4D.GetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <param name="z">The input coordinate on the t-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.IModule1D">
            <summary>
            Abstract interface for noise modules that calculates and outputs a value
            given a one-dimensional input value.
            </summary>
        </member>
        <member name="M:LibNoise.IModule1D.GetValue(System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.Pipe.GetValue(System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.Pipe.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.Pipe.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.Pipe.GetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <param name="t">The input coordinate on the t-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.RidgedMultiFractal">
             <summary>
             Noise module that outputs 3-dimensional ridged-multifractal noise.
            
             Ridged-multifractal noise is generated in much of the same way as 
             fractal noise, except the output of each octave is modified by an 
             absolute-value function.  Modifying the octave values in this way 
             produces ridge-like formations.
            
             Ridged-multifractal noise does not use a persistence value.  This is
             because the persistence values of the octaves are based on the values
             generated from from previous octaves, creating a feedback loop (or
             that's what it looks like after reading the code.)
            
             This noise module outputs ridged-multifractal-noise values that
             usually range from -1.0 to +1.0, but there are no guarantees that all
             output values will exist within that range.
            
             For ridged-multifractal noise generated with only one octave,
             the output value ranges from -1.0 to 0.0.
            
             Ridged-multifractal noise is often used to generate craggy mountainous
             terrain or marble-like textures.
             
             Some good parameter values to start with: 
            		spectralExponent: 0.9
            		offset: 1
            		gain:  2
             </summary>
        </member>
        <member name="M:LibNoise.Filter.RidgedMultiFractal.#ctor">
            <summary>
            0-args constructor.
            </summary>
        </member>
        <member name="M:LibNoise.Filter.RidgedMultiFractal.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.RidgedMultiFractal.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.SinFractal">
             <summary>
             Noise module that outputs 3-dimensional Sin Fractal noise.
            
             This noise module is nearly identical to SumFractal except
             this noise module modifies each octave with an absolute-value
             function and apply a Sine function of output value + x coordinate
             
             </summary>
        </member>
        <member name="M:LibNoise.Filter.SinFractal.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.SinFractal.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.SumFractal">
             <summary>
             Noise module that outputs 3-dimensional Sum Fractal noise. This noise
             is also known as "Fractional BrownianMotion noise"
            
             Sum Fractal noise is the sum of several coherent-noise functions of
             ever-increasing frequencies and ever-decreasing amplitudes.
             
             This class implements the original noise::module::Perlin
             
             </summary>
        </member>
        <member name="M:LibNoise.Filter.SumFractal.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Filter.SumFractal.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Filter.Voronoi">
             <summary>
             Noise module that outputs Voronoi cells.
            
            
             In mathematics, a <i>Voronoi cell</i> is a region containing all the
             points that are closer to a specific <i>seed point</i> than to any
             other seed point.  These cells mesh with one another, producing
             polygon-like formations.
            
             By default, this noise module randomly places a seed point within
             each unit cube.  By modifying the <i>frequency</i> of the seed points,
             an application can change the distance between seed points.  The
             higher the frequency, the closer together this noise module places
             the seed points, which reduces the size of the cells.
            
             This noise module assigns each Voronoi cell with a random constant
             value from a coherent-noise function.  The <i>displacement value</i>
             controls the range of random values to assign to each cell.  The
             range of random values is +/- the displacement value.
             The frequency determines the size of the Voronoi cells and the
             distance between these cells.
             
             To modify the random positions of the seed points, call the SetSeed()
             method.
            
             This noise module can optionally add the distance from the nearest
             seed to the output value.  To enable this feature, call the
             EnableDistance() method.  This causes the points in the Voronoi cells
             to increase in value the further away that point is from the nearest
             seed point.
            
             Voronoi cells are often used to generate cracked-mud terrain
             formations or crystal-like textures
             </summary>
        </member>
        <member name="F:LibNoise.Filter.Voronoi.DefaultDisplacement">
            <summary>
            Default persistence value for the Voronoi noise module.
            </summary>
        </member>
        <member name="M:LibNoise.Filter.Voronoi.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Filter.Voronoi.Displacement">
            <summary>
            This noise module assigns each Voronoi cell with a random constant
            value from a coherent-noise function.  The <i>displacement
            value</i> controls the range of random values to assign to each
            cell.  The range of random values is +/- the displacement value.
            </summary>
        </member>
        <member name="P:LibNoise.Filter.Voronoi.Distance">
            <summary>
            Applying the distance from the nearest seed point to the output
            value causes the points in the Voronoi cells to increase in value
            the further away that point is from the nearest seed point.
            </summary>
        </member>
        <member name="T:LibNoise.Libnoise">
            <summary>
            Libnoise
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Pi">
            <summary>
            Pi
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Sqrt2">
            <summary>
            Square root of 2.
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Sqrt3">
            <summary>
            Square root of 3.
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Sqrt5">
            <summary>
            Square root of 5.
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Deg2Rad">
            <summary>
            Converts an angle from degrees to radians.
            </summary>
        </member>
        <member name="F:LibNoise.Libnoise.Rad2Deg">
            <summary>
            Converts an angle from radians to degrees.
            </summary>
        </member>
        <member name="M:LibNoise.Libnoise.LatLonToXYZ(System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts latitude/longitude coordinates on a unit sphere into 3D Cartesian coordinates. 
            </summary>
            <param name="lat">The latitude, in degrees. Must range from -90 to +90.</param>
            <param name="lon">The longitude, in degrees. Must range from -180 to +180.</param>
            <param name="x">By ref, this parameter contains the x coordinate.</param>
            <param name="y">By ref, this parameter contains the y coordinate.</param>
            <param name="z">By ref, this parameter contains the z coordinate.</param>
        </member>
        <member name="M:LibNoise.Libnoise.Lerp(System.Byte,System.Byte,System.Single)">
             <summary>
             Performs linear interpolation between two byte-values by a.
            
             The amount value should range from 0.0 to 1.0.  If the amount value is
             0.0, this function returns n0.  If the amount value is 1.0, this
             function returns n1.
             </summary>
             <param name="n0">The first value.</param>
             <param name="n1">The second value.</param>
             <param name="a">the amount to interpolate between the two values.</param>
             <returns>The interpolated value.</returns>
        </member>
        <member name="M:LibNoise.Libnoise.Lerp(System.Single,System.Single,System.Single)">
             <summary>
             Performs linear interpolation between two float-values by a.
            
             The amount value should range from 0.0 to 1.0.  If the amount value is
             0.0, this function returns n0.  If the amount value is 1.0, this
             function returns n1.
             </summary>
             <param name="n0">The first value.</param>
             <param name="n1">The second value.</param>
             <param name="a">The amount to interpolate between the two values.</param>
             <returns>The interpolated value.</returns>
        </member>
        <member name="M:LibNoise.Libnoise.Cerp(System.Single,System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Performs cubic interpolation between two values bound between two other values.
            
             The amount value should range from 0.0 to 1.0.  If the amount value is
             0.0, this function returns n1.  If the amount value is 1.0, this
             function returns n2.
             </summary>
             <param name="n0">The value before the first value.</param>
             <param name="n1">The first value.</param>
             <param name="n2">The second value.</param>
             <param name="n3">The value after the second value.</param>
             <param name="a">The amount to interpolate between the two values.</param>
             <returns>The interpolated value.</returns>
        </member>
        <member name="M:LibNoise.Libnoise.SCurve3(System.Single)">
            <summary>
            Maps a value onto a cubic S-curve.
            a should range from 0.0 to 1.0.
            The derivitive of a cubic S-curve is zero at a = 0.0 and a = 1.0
            </summary>
            <param name="a">The value to map onto a cubic S-curve.</param>
            <returns>The mapped value.</returns>
        </member>
        <member name="M:LibNoise.Libnoise.SCurve5(System.Single)">
            <summary>
            Maps a value onto a quintic S-curve.
            a should range from 0.0 to 1.0.
            The first derivitive of a quintic S-curve is zero at a = 0.0 and a = 1.0.
            The second derivitive of a quintic S-curve is zero at a = 0.0 and a = 1.0.
            </summary>
            <param name="a">The value to map onto a quintic S-curve.</param>
            <returns>The mapped value.</returns>
        </member>
        <member name="M:LibNoise.Libnoise.Clamp(System.Int32,System.Int32,System.Int32)">
             <summary>
             Clamps a value onto a clamping range.
            
             This function does not modify any parameters.
             </summary>
             <param name="value">The value to clamp.</param>
             <param name="lowerBound">The lower bound of the clamping range</param>
             <param name="upperBound">The upper bound of the clamping range</param>
             <returns>		
             - value if value lies between lowerBound and upperBound.
             - lowerBound if value is less than lowerBound.
             - upperBound if value is greater than upperBound.
             </returns>
        </member>
        <member name="M:LibNoise.Libnoise.SwapValues``1(``0@,``0@)">
            <summary>
            Swaps two values.
            
            The values within the the two variables are swapped.
            </summary>
            <param name="a">A variable containing the first value.</param>
            <param name="b">A variable containing the second value.</param>
        </member>
        <member name="M:LibNoise.Libnoise.ToInt32Range(System.Double)">
             <summary>
             Modifies a floating-point value so that it can be stored in a
             int 32 bits variable.
            
             In libnoise, the noise-generating algorithms are all integer-based;
             they use variables of type int 32 bits.  Before calling a noise
             function, pass the x, y, and z coordinates to this function to
             ensure that these coordinates can be cast to a int 32 bits value.
            
             Although you could do a straight cast from double to int 32 bits, the
             resulting value may differ between platforms.  By using this function,
             you ensure that the resulting value is identical between platforms.
             </summary>
             <param name="value">A floating-point number.</param>
             <returns>The modified floating-point number.</returns>
        </member>
        <member name="M:LibNoise.Libnoise.UnpackBigUint32(System.Int32,System.Byte[]@)">
            <summary>
            Unpack the given integer (int32) value to an array of 4 bytes in big endian format.
            If the length of the buffer is too smal, it wil be resized.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The output buffer.</param>
        </member>
        <member name="M:LibNoise.Libnoise.UnpackBigFloat(System.Single,System.Byte[]@)">
            <summary>
            Unpack the given float to an array of 4 bytes in big endian format.
            If the length of the buffer is too smal, it wil be resized.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The output buffer.</param>
        </member>
        <member name="M:LibNoise.Libnoise.UnpackBigUint16(System.Int16,System.Byte[]@)">
            <summary>
            Unpack the given short (int16) value to an array of 2 bytes in big endian format.
            If the length of the buffer is too smal, it wil be resized.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The output buffer.</param>
        </member>
        <member name="M:LibNoise.Libnoise.UnpackLittleUint16(System.Int16,System.Byte[]@)">
            <summary>
            Unpack the given short (int16) to an array of 2 bytes  in little endian format.
            If the length of the buffer is too smal, it wil be resized.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The output buffer.</param>
        </member>
        <member name="M:LibNoise.Libnoise.UnpackLittleUint32(System.Int32,System.Byte[]@)">
            <summary>
            Unpack the given integer (int32) to an array of 4 bytes  in little endian format.
            If the length of the buffer is too smal, it wil be resized.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The output buffer.</param>
        </member>
        <member name="M:LibNoise.Libnoise.UnpackLittleFloat(System.Single,System.Byte[]@)">
            <summary>
            Unpack the given float (int32) to an array of 4 bytes  in little endian format.
            If the length of the buffer is too smal, it wil be resized.
            </summary>
            <param name="value">The value.</param>
            <param name="buffer">The output buffer.</param>
        </member>
        <member name="M:LibNoise.Libnoise.FastFloor(System.Double)">
            <summary>
            faster methid than using (int)Math.floor(x).
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:LibNoise.Libnoise.FastFloor(System.Single)">
            <summary>
            faster methid than using (int)Math.floor(x).
            </summary>
            <param name="x">The x.</param>
        </member>
        <member name="T:LibNoise.Model.AbstractModel">
             <summary>
             Abstract base class for all Model
            
             Model must defined their own GetValue() method
             </summary>
        </member>
        <member name="F:LibNoise.Model.AbstractModel.PSourceModule">
            <summary>
            The source input module.
            </summary>
        </member>
        <member name="M:LibNoise.Model.AbstractModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Model.AbstractModel.#ctor(LibNoise.IModule)">
            <summary>
            Constructor
            </summary>
            <param name="module">The noise module that is used to generate the output values</param>
        </member>
        <member name="P:LibNoise.Model.AbstractModel.SourceModule">
            <summary>
            Gets or sets the source module.
            </summary>
        </member>
        <member name="T:LibNoise.Model.Cylinder">
             <summary>
             Model that defines the surface of a cylinder.
            
             This model returns an output value from a noise module given the
             coordinates of an input value located on the surface of a cylinder.
            
             To generate an output value, pass the (angle, height) coordinates of
             an input value to the GetValue() method.
            
             This model is useful for creating:
             - seamless textures that can be mapped onto a cylinder
            
             This cylinder has a radius of 1.0 unit and has infinite height.  It is
             oriented along the y axis.  Its center is located at the origin.
             </summary>
        </member>
        <member name="M:LibNoise.Model.Cylinder.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:LibNoise.Model.Cylinder.#ctor(LibNoise.IModule3D)">
            <summary>
            Constructor.
            </summary>
            <param name="module">The noise module that is used to generate the output values.</param>
        </member>
        <member name="M:LibNoise.Model.Cylinder.GetValue(System.Single,System.Single)">
             <summary>
             Returns the output value from the noise module given the
             (angle, height) coordinates of the specified input value located
             on the surface of the cylinder.
            
             This cylinder has a radius of 1.0 unit and has infinite height.
             It is oriented along the y axis.  Its center is located at the
             origin.
             </summary>
             <param name="angle">The angle around the cylinder's center, in degrees.</param>
             <param name="height">The height along the y axis.</param>
             <returns>The output value from the noise module.</returns>
        </member>
        <member name="T:LibNoise.Model.Line">
             <summary>
             Model that defines the displacement of a line segment.
            
             This model returns an output value from a noise module given the
             one-dimensional coordinate of an input value located on a line
             segment, which can be used as displacements.
            
             This class is useful for creating:
              - roads and rivers
              - disaffected college students
            
             To generate an output value, pass an input value between 0.0 and 1.0
             to the GetValue() method.  0.0 represents the start position of the
             line segment and 1.0 represents the end position of the line segment.
             
             </summary>
        </member>
        <member name="F:LibNoise.Model.Line.attenuate">
            <summary>
            A flag indicating that the output value is to be attenuated
            (moved toward 0.0) as the ends of the line segment are approached.
            </summary>
        </member>
        <member name="F:LibNoise.Model.Line.endPosition">
            <summary>
            The position of the end of the line segment.
            </summary>
        </member>
        <member name="F:LibNoise.Model.Line.startPosition">
            <summary>
            The position of the start of the line segment.
            </summary>
        </member>
        <member name="M:LibNoise.Model.Line.#ctor">
            <summary>Initializes a new instance of the <see cref="T:LibNoise.Model.Line"/> class. 
            Default constructor</summary>
        </member>
        <member name="M:LibNoise.Model.Line.#ctor(LibNoise.IModule)">
            <summary>Initializes a new instance of the <see cref="T:LibNoise.Model.Line"/> class. Constructor</summary>
            <param name="module">The noise module that is used to generate the output values</param>
        </member>
        <member name="M:LibNoise.Model.Line.GetValue(System.Single)">
            <summary>Returns the output value from the noise module given the
            one-dimensional coordinate of the specified input value located
            on the line segment. This value may be attenuated (moved toward
            0.0) as p approaches either end of the line segment; this is
            the default behavior.
            If the value is not to be attenuated, p can safely range
            outside the 0.0 to 1.0 range; the output value will be
            extrapolated along the line that this segment is part of.</summary>
            <param name="p">The distance along the line segment (ranges from 0.0 to 1.0)</param>
            <returns>The output value from the noise module</returns>
        </member>
        <member name="M:LibNoise.Model.Line.SetEndPoint(System.Single,System.Single,System.Single)">
            <summary>Sets the position ( x, y, z ) of the end of the line
            segment to choose values along.</summary>
            <param name="x">x coordinate of the end position</param>
            <param name="y">y coordinate of the end position</param>
            <param name="z">z coordinate of the end position</param>
        </member>
        <member name="M:LibNoise.Model.Line.SetStartPoint(System.Single,System.Single,System.Single)">
            <summary>Sets the position ( x, y, z ) of the start of the line
            segment to choose values along.</summary>
            <param name="x">x coordinate of the start position</param>
            <param name="y">y coordinate of the start position</param>
            <param name="z">z coordinate of the start position</param>
        </member>
        <member name="P:LibNoise.Model.Line.Attenuate">
            <summary>
            Gets or sets a value indicating whether the output value is to be attenuated
            (moved toward 0.0) as the ends of the line segment are approached.
            </summary>
        </member>
        <member name="T:LibNoise.Model.Line.Position">
            <summary>
            Internal struct that represent a 3D position
            </summary>
        </member>
        <member name="F:LibNoise.Model.Line.Position.x">
            <summary>
            x coordinate of a position.
            </summary>
        </member>
        <member name="F:LibNoise.Model.Line.Position.y">
            <summary>
            y coordinate of a position.
            </summary>
        </member>
        <member name="F:LibNoise.Model.Line.Position.z">
            <summary>
            z coordinate of a position.
            </summary>
        </member>
        <member name="M:LibNoise.Model.Line.Position.#ctor(System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:LibNoise.Model.Line.Position"/> struct.</summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
        </member>
        <member name="T:LibNoise.Model.Plane">
             <summary>
             Model that defines the surface of a plane.
            
             This model returns an output value from a noise module given the
             coordinates of an input value located on the surface of an ( x, z ) plane.
            
             To generate an output value, pass the (x, z) coordinates of
             an input value to the GetValue() method.
            
             This model is useful for creating:
             - two-dimensional textures
             - terrain height maps for local areas
            
             This plane extends infinitely in both directions.
             </summary>
        </member>
        <member name="M:LibNoise.Model.Plane.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Model.Plane.#ctor(LibNoise.IModule)">
            <summary>
            Constructor
            </summary>
            <param name="module">The noise module that is used to generate the output values</param>
        </member>
        <member name="M:LibNoise.Model.Plane.GetValue(System.Single,System.Single)">
            <summary>
            Returns the output value from the noise module given the
            (x, z) coordinates of the specified input value located
            on the surface of the plane.
            </summary>
            <param name="x">The x coordinate of the input value</param>
            <param name="z">The z coordinate of the input value</param>
            <returns>The output value from the noise module</returns>
        </member>
        <member name="T:LibNoise.Model.Sphere">
             <summary>
             Model that defines the surface of a sphere.
            
             This model returns an output value from a noise module given the
             coordinates of an input value located on the surface of a sphere.
            
             To generate an output value, pass the (latitude, longitude)
             coordinates of an input value to the GetValue() method.
            
             This model is useful for creating:
             - seamless textures that can be mapped onto a sphere
             - terrain height maps for entire planets
            
             This sphere has a radius of 1.0 unit and its center is located at
             the origin.
             </summary>
        </member>
        <member name="M:LibNoise.Model.Sphere.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Model.Sphere.#ctor(LibNoise.IModule3D)">
            <summary>
            Constructor
            </summary>
            <param name="module">The noise module that is used to generate the output values</param>
        </member>
        <member name="M:LibNoise.Model.Sphere.GetValue(System.Single,System.Single)">
             <summary>
             Returns the output value from the noise module given the
             (latitude, longitude) coordinates of the specified input value
             located on the surface of the sphere.
            
             Use a negative latitude if the input value is located on the
             southern hemisphere.
            
             Use a negative longitude if the input value is located on the
             western hemisphere.
             </summary>
             <param name="lat">The latitude of the input value, in degrees</param>
             <param name="lon">The longitude of the input value, in degrees</param>
             <returns>The output value from the noise module</returns>
        </member>
        <member name="T:LibNoise.ModifierModule">
            <summary>
            Base class for source module modifiers
            </summary>
        </member>
        <member name="F:LibNoise.ModifierModule._sourceModule">
            <summary>
            The source input module
            </summary>
        </member>
        <member name="M:LibNoise.ModifierModule.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibNoise.ModifierModule.#ctor(LibNoise.IModule)">
            <summary>
            
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:LibNoise.ModifierModule.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Abs">
            <summary>
            Noise module that outputs the absolute value of the output value from
            a source module.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Abs.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Modifier.Cache">
             <summary>
             Noise module that caches the last output value generated by a source
             module.
            
             If an application passes an input value to the GetValue() method that
             differs from the previously passed-in input value, this noise module
             instructs the source module to calculate the output value.  This
             value, as well as the ( @a x, @a y, @a z ) coordinates of the input
             value, are stored (cached) in this noise module.
            
             If the application passes an input value to the GetValue() method
             that is equal to the previously passed-in input value, this noise
             module returns the cached output value without having the source
             module recalculate the output value.
            
             If an application passes a new source module to the SetSourceModule()
             method, the cache is invalidated.
            
             Caching a noise module is useful if it is used as a source module for
             multiple noise modules.  If a source module is not cached, the source
             module will redundantly calculate the same output value once for each
             noise module in which it is included.
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Cache._cachedValue">
            <summary>
            The cached output value at the cached input value.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Cache._isCached">
            <summary>
            Determines if a cached output value is stored in this noise
            module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Cache._xCache">
            <summary>
            x coordinate of the cached input value.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Cache._yCache">
            <summary>
            y coordinate of the cached input value.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Cache._zCache">
            <summary>
            z coordinate of the cached input value.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Cache.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Modifier.Cache.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Clamp">
             <summary>
             Noise module that clamps the output value from a source module to a
             range of values.
            
             The range of values in which to clamp the output value is called the
             <i>clamping range</i>.
            
             If the output value from the source module is less than the lower
             bound of the clamping range, this noise module clamps that value to
             the lower bound.  If the output value from the source module is
             greater than the upper bound of the clamping range, this noise module
             clamps that value to the upper bound.
            
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Clamp.DEFAULT_LOWER_BOUND">
            <summary>
            Default lower bound of the clamping range 
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Clamp.DEFAULT_UPPER_BOUND">
            <summary>
            Default upper bound of the clamping range
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Clamp._lowerBound">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Clamp._upperBound">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Clamp.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Modifier.Clamp.LowerBound">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Clamp.UpperBound">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.ControlPoint">
            <summary>
            This structure defines a control point.
            Control points are used for defining splines.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.ControlPoint.Input">
            <summary>
            The input value stored in the control point
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.ControlPoint.Output">
            <summary>
            The output value stored in the control point
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.ControlPoint.#ctor(System.Single,System.Single)">
            <summary>
            Create a new ControlPoint with given values
            </summary>
            <param name="input">The input value stored in the control point</param>
            <param name="output">The output value stored in the control point</param>
        </member>
        <member name="T:LibNoise.Modifier.Curve">
             <summary>
             Noise module that maps the output value from a source module onto an
             arbitrary function curve.
            
             This noise module maps the output value from the source module onto an
             application-defined curve.  This curve is defined by a number of
             <i>control points</i>; each control point has an <i>input value</i>
             that maps to an <i>output value</i>.  Refer to the following
             illustration:
            
             To add the control points to this curve, call the AddControlPoint()
             method.
            
             Since this curve is a cubic spline, an application must add a minimum
             of four control points to the curve.  If this is not done, the
             GetValue() method fails.  Each control point can have any input and
             output value, although no two control points can have the same input
             value.  There is no limit to the number of control points that can be
             added to the curve. 
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Curve._controlPoints">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Curve.AddControlPoint(System.Single,System.Single)">
             <summary>
             Adds a control point to the curve.
            
             No two control points have the same input value.
            
             @throw System.ArgumentException if two control points have the same input value.
            
             It does not matter which order these points are added.
             </summary>
             <param name="input">The input value stored in the control point.</param>
             <param name="output">The output value stored in the control point.</param>
        </member>
        <member name="M:LibNoise.Modifier.Curve.AddControlPoint(LibNoise.Modifier.ControlPoint)">
             <summary>
             Adds a control point to the curve.
            
             No two control points have the same input value.
            
             @throw System.ArgumentException if two control points have the same input value.
            
             It does not matter which order these points are added.
             </summary>
             <param name="point"></param>
        </member>
        <member name="M:LibNoise.Modifier.Curve.CountControlPoints">
            <summary>
            Return the size of the ControlPoint list
            </summary>
            <returns>The number of ControlPoint in the list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LibNoise.Modifier.Curve.getControlPoints" -->
        <member name="M:LibNoise.Modifier.Curve.ClearControlPoints">
            <summary>
            Deletes all the control points on the curve.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Curve.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Modifier.Curve.SortControlPoints">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Exponent">
             <summary>
             Noise module that maps the output value from a source module onto an
             exponential curve.
            
             Because most noise modules will output values that range from -1.0 to
             +1.0, this noise module first normalizes this output value (the range
             becomes 0.0 to 1.0), maps that value onto an exponential curve, then
             rescales that value back to the original range.
            
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Exponent.DEFAULT_EXPONENT">
            <summary>
            Default exponent
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Exponent._exponent">
            <summary>
            Exponent to apply to the output value from the source module.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Exponent.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Modifier.Exponent.ExponentValue">
            <summary>
            gets or sets the exponent
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Invert">
            <summary>
            Noise module that inverts the output value from a source module.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Invert.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Modifier.ScaleBias">
             <summary>
             Noise module that applies a scaling factor and a bias to the output
             value from a source module.
            
             The GetValue() method retrieves the output value from the source
             module, multiplies it with a scaling factor, adds a bias to it, then
             outputs the value.
            
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.ScaleBias.DEFAULT_SCALE">
            <summary>
            Default scale
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.ScaleBias.DEFAULT_BIAS">
            <summary>
            Default bias
            noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.ScaleBias._bias">
            <summary>
            the bias to apply to the scaled output value from the source module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.ScaleBias._scale">
            <summary>
            the scaling factor to apply to the output value from the source module.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.ScaleBias.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Modifier.ScaleBias.Scale">
            <summary>
            gets or sets the scale value
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.ScaleBias.Bias">
            <summary>
            gets or sets the bias value
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Terrace">
             <summary>
             Noise module that maps the output value from a source module onto a
             terrace-forming curve.
            
             This noise module maps the output value from the source module onto a
             terrace-forming curve.  The start of this curve has a slope of zero;
             its slope then smoothly increases.  This curve also contains
             <i>control points</i> which resets the slope to zero at that point,
             producing a "terracing" effect.  Refer to the following illustration:
            
             To add a control point to this noise module, call the
             AddControlPoint() method.
            
             An application must add a minimum of two control points to the curve.
             If this is not done, the GetValue() method fails.  The control points
             can have any value, although no two control points can have the same
             value.  There is no limit to the number of control points that can be
             added to the curve.
            
             This noise module clamps the output value from the source module if
             that value is less than the value of the lowest control point or
             greater than the value of the highest control point.
            
             This noise module is often used to generate terrain features such as
             your stereotypical desert canyon.
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Terrace._controlPoints">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Terrace._invert">
            <summary>
            Enables or disables the inversion of the terrace-forming curve
            between the control points.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Terrace.AddControlPoint(System.Single)">
             <summary>
             Adds a control point to the curve.
            
             No two control points have the same input value.
            
             @throw System.ArgumentException if two control points have the same input value.
            
             It does not matter which order these points are added.
             </summary>
             <param name="input">The input value stored in the control point.</param>
        </member>
        <member name="M:LibNoise.Modifier.Terrace.CountControlPoints">
            <summary>
            Return the size of the ControlPoint list
            </summary>
            <returns>The number of ControlPoint in the list</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LibNoise.Modifier.Terrace.getControlPoints" -->
        <member name="M:LibNoise.Modifier.Terrace.ClearControlPoints">
            <summary>
            Deletes all the control points on the curve.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Terrace.MakeControlPoints(System.Int32)">
             <summary>
             Creates a number of equally-spaced control points that range from
             -1 to +1.
            
             The number of control points must be greater than or equal to 2
             The previous control points on the terrace-forming curve are deleted.
            
             Two or more control points define the terrace-forming curve.  The
             start of this curve has a slope of zero; its slope then smoothly
             increases.  At the control points, its slope resets to zero.
             
             @throw ArgumentException if an invalid parameter was
             specified
             </summary>
             <param name="controlPointCount">The number of control points to generate.</param>
        </member>
        <member name="M:LibNoise.Modifier.Terrace.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Modifier.Terrace.SortControlPoints">
            <summary>
            
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Terrace.Invert">
            <summary>
            gets or sets the inversion of the terrace-forming curve between the control points
            </summary>
        </member>
        <member name="T:LibNoise.NoiseFilter">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibNoise.NoisePrimitive">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibNoise.NoiseQuality">
            <summary>
            Enumerates the noise quality.
            </summary>
        </member>
        <member name="F:LibNoise.NoiseQuality.Fast">
            Generates coherent noise quickly.  When a coherent-noise function with
            this quality setting is used to generate a bump-map image, there are
            noticeable "creasing" artifacts in the resulting image.  This is
            because the derivative of that function is discontinuous at integer
            boundaries.
        </member>
        <member name="F:LibNoise.NoiseQuality.Standard">
            Generates standard-quality coherent noise.  When a coherent-noise
            function with this quality setting is used to generate a bump-map
            image, there are some minor "creasing" artifacts in the resulting
            image.  This is because the second derivative of that function is
            discontinuous at integer boundaries.
        </member>
        <member name="F:LibNoise.NoiseQuality.Best">
            Generates the best-quality coherent noise.  When a coherent-noise
            function with this quality setting is used to generate a bump-map
            image, there are no "creasing" artifacts in the resulting image.  This
            is because the first and second derivatives of that function are
            continuous at integer boundaries.
        </member>
        <member name="T:LibNoise.PrimitiveModule">
            <summary>
            Base class for all noise primitive.
            </summary>
        </member>
        <member name="F:LibNoise.PrimitiveModule.DefaultSeed">
            <summary>
            Default noise seed for the noise module.
            </summary>
        </member>
        <member name="F:LibNoise.PrimitiveModule.DefaultQuality">
            <summary>
            Default noise quality for the noise module.
            </summary>
        </member>
        <member name="F:LibNoise.PrimitiveModule._quality">
            <summary>
            The quality of the Perlin noise.
            </summary>
        </member>
        <member name="F:LibNoise.PrimitiveModule._seed">
            <summary>
            The seed value used by the Perlin-noise function.
            </summary>
        </member>
        <member name="M:LibNoise.PrimitiveModule.#ctor">
            <summary>
            A 0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.PrimitiveModule.#ctor(System.Int32)">
            <summary>
            A basic connstrucutor
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:LibNoise.PrimitiveModule.#ctor(System.Int32,LibNoise.NoiseQuality)">
            <summary>
            A basic connstrucutor
            </summary>
            <param name="seed"></param>
            <param name="quality"></param>
        </member>
        <member name="P:LibNoise.PrimitiveModule.Seed">
            <summary>
            Gets or sets the seed of the perlin noise.
            </summary>
        </member>
        <member name="P:LibNoise.PrimitiveModule.Quality">
            <summary>
            Gets or sets the quality
            </summary>
        </member>
        <member name="T:LibNoise.Primitive.BevinsGradient">
            <summary>
            A gradient noise generator. The Jason Bevins's Libnoise ported in c#
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.BevinsGradient.#ctor">
            <summary>
            0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.BevinsGradient.#ctor(System.Int32,LibNoise.NoiseQuality)">
            <summary>
            Create a new BevinsGradientNoise with given values
            </summary>
            <param name="seed"></param>
            <param name="quality"></param>
        </member>
        <member name="M:LibNoise.Primitive.BevinsGradient.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsGradient.GradientCoherentNoise3D(System.Single,System.Single,System.Single,System.Int64,LibNoise.NoiseQuality)">
             <summary>
             Generates a gradient-coherent-noise value from the coordinates of a
             three-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             For an explanation of the difference between <i>gradient</i> noise and
             <i>value</i> noise, see the comments for the GradientNoise3D() function.
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="y">The y coordinate of the input value</param>
             <param name="z">The z coordinate of the input value</param>
             <param name="seed">seed The random number seed</param>
             <param name="quality">The quality of the coherent-noise</param>
             <returns>The generated gradient-coherent-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsGradient.GradientNoise3D(System.Single,System.Single,System.Single,System.Int32,System.Int32,System.Int32,System.Int64)">
             <summary>
             Generates a gradient-noise value from the coordinates of a
             three-dimensional input value and the integer coordinates of a
             nearby three-dimensional value.
            
             The difference between fx and ix must be less than or equal to one.
             The difference between fy and iy must be less than or equal to one.
             The difference between fz and iz must be less than or equal to one.
            
             A <i>gradient</i>-noise function generates better-quality noise than a
             <i>value</i>-noise function.  Most noise modules use gradient noise for
             this reason, although it takes much longer to calculate.
            
             The return value ranges from -1.0 to +1.0.
            
             This function generates a gradient-noise value by performing the
             following steps:
             - It first calculates a random normalized vector based on the
               nearby integer value passed to this function.
             - It then calculates a new value by adding this vector to the
               nearby integer value passed to this function.
             - It then calculates the dot product of the above-generated value
               and the floating-point input value passed to this function.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="fx">The floating-point x coordinate of the input value</param>
             <param name="fy">The floating-point y coordinate of the input value</param>
             <param name="fz">The floating-point z coordinate of the input value</param>
             <param name="ix">The integer x coordinate of a nearby value</param>
             <param name="iy">The integer y coordinate of a nearby value</param>
             <param name="iz">The integer z coordinate of a nearby value</param>
             <param name="seed">The random number seed</param>
             <returns>The generated gradient-noise value.</returns>
        </member>
        <member name="T:LibNoise.Primitive.BevinsValue">
            <summary>
            Base class for all value noise generator module
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.#ctor">
            <summary>
            0-args constructor.
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.#ctor(System.Int32,LibNoise.NoiseQuality)">
            <summary>
            Create a new BevinsValueNoise with given values.
            </summary>
            <param name="seed">Seed.</param>
            <param name="quality">Quality.</param>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueCoherentNoise3D(System.Single,System.Single,System.Single,System.Int64,LibNoise.NoiseQuality)">
             <summary>
             Generates a value-coherent-noise value from the coordinates of a
             three-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="y">The y coordinate of the input value</param>
             <param name="z">The z coordinate of the input value</param>
             <param name="seed">The random number seed</param>
             <param name="quality">The quality of the coherent-noise</param>
             <returns>The generated value-coherent-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueNoise3D(System.Int32,System.Int32,System.Int32,System.Int64)">
             <summary>
             Generates a value-noise value from the coordinates of a
             three-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="y">The y coordinate of the input value</param>
             <param name="z">The z coordinate of the input value</param>
             <param name="seed">A random number seed</param>
             <returns>The generated value-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.IntValueNoise3D(System.Int32,System.Int32,System.Int32,System.Int64)">
             <summary>
             Generates an integer-noise value from the coordinates of a
             three-dimensional input value.
             
             The return value ranges from 0 to 2147483647.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="x">The integer x coordinate of the input value.</param>
             <param name="y">The integer y coordinate of the input value</param>
             <param name="z">The integer z coordinate of the input value</param>
             <param name="seed">A random number seed</param>
             <returns>The generated integer-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueCoherentNoise2D(System.Single,System.Single,System.Int64,LibNoise.NoiseQuality)">
             <summary>
             Generates a value-coherent-noise value from the coordinates of a
             two-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="y">The y coordinate of the input value</param>
             <param name="seed">The random number seed</param>
             <param name="quality">The quality of the coherent-noise</param>
             <returns>The generated value-coherent-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueNoise2D(System.Int32,System.Int32,System.Int64)">
             <summary>
             Generates a value-noise value from the coordinates of a
             two-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="y">The y coordinate of the input value</param>
             <param name="seed">A random number seed</param>
             <returns>The generated value-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueNoise2D(System.Int32,System.Int32)">
             <summary>
             Generates a value-noise value from the coordinates of a
             two-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
             
             it use ValueNoise2D(int x, int y, long seed) with a seed number of 0
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="y">The y coordinate of the input value</param>
             <returns></returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.IntValueNoise2D(System.Int32,System.Int32,System.Int64)">
             <summary>
             Generates an integer-noise value from the coordinates of a
             two-dimensional input value.
             
             The return value ranges from 0 to 2147483647.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="x">The integer x coordinate of the input value.</param>
             <param name="y">The integer y coordinate of the input value</param>
             <param name="seed">A random number seed</param>
             <returns>The generated integer-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.GetValue(System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueCoherentNoise1D(System.Single,System.Int64,LibNoise.NoiseQuality)">
             <summary>
             Generates a value-coherent-noise value from the coordinates of a
             one-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="seed">The random number seed</param>
             <param name="quality">The quality of the coherent-noise</param>
             <returns>The generated value-coherent-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.ValueNoise1D(System.Int32,System.Int64)">
             <summary>
             Generates a value-noise value from the coordinates of a
             one-dimensional input value.
            
             The return value ranges from -1.0 to +1.0.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="x">The x coordinate of the input value</param>
             <param name="seed">A random number seed</param>
             <returns>The generated value-noise value</returns>
        </member>
        <member name="M:LibNoise.Primitive.BevinsValue.IntValueNoise1D(System.Int32,System.Int64)">
             <summary>
             Generates an integer-noise value from the coordinates of a
             one-dimensional input value.
             
             The return value ranges from 0 to 2147483647.
            
             A noise function differs from a random-number generator because it
             always returns the same output value if the same input value is passed
             to it.
             </summary>
             <param name="x">The integer x coordinate of the input value.</param>
             <param name="seed">A random number seed</param>
             <returns>The generated integer-noise value</returns>
        </member>
        <member name="T:LibNoise.Primitive.Checkerboard">
             <summary>
             Noise module that outputs a checkerboard pattern.
            
             This noise module outputs unit-sized blocks of alternating values.
             The values of these blocks alternate between -1.0 and +1.0.
            
             This noise module is not really useful by itself, but it is often used
             for debugging purposes.
             
             </summary>
        </member>
        <member name="M:LibNoise.Primitive.Checkerboard.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="T:LibNoise.Primitive.Constant">
             <summary>
             Noise module that outputs a constant value.
            
             This noise module is not useful by itself, but it is often used as a
             source module for other noise modules.
             </summary>
        </member>
        <member name="F:LibNoise.Primitive.Constant.DEFAULT_VALUE">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.Constant._constant">
            <summary>
            
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.Constant.#ctor">
            <summary>
            Create a new noiws module with DEFAULT_VALUE
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.Constant.#ctor(System.Single)">
            <summary>
            Create a new noise module width given value 
            </summary>
            <param name="value">The value to use</param>
        </member>
        <member name="M:LibNoise.Primitive.Constant.GetValue(System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.Constant.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.Constant.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.Constant.GetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <param name="t">The input coordinate on the t-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Primitive.Constant.ConstantValue">
            <summary>
            the constant output value for this noise module.
            </summary>
        </member>
        <member name="T:LibNoise.Primitive.Cylinders">
             <summary>
             Noise module that outputs concentric cylinders.
            
             This noise module outputs concentric cylinders centered on the origin.
             These cylinders are oriented along the y axis similar to the
             concentric rings of a tree.  Each cylinder extends infinitely along
             the y axis.
            
             The first cylinder has a radius of 1.0.  Each subsequent cylinder has
             a radius that is 1.0 unit larger than the previous cylinder.
            
             The output value from this noise module is determined by the distance
             between the input value and the the nearest cylinder surface.  The
             input values that are located on a cylinder surface are given the
             output value 1.0 and the input values that are equidistant from two
             cylinder surfaces are given the output value -1.0.
            
             An application can change the frequency of the concentric cylinders.
             Increasing the frequency reduces the distances between cylinders.
            
             This noise module, modified with some low-frequency, low-power
             turbulence, is useful for generating wood-like textures.
             
             </summary>
        </member>
        <member name="F:LibNoise.Primitive.Cylinders.DEFAULT_FREQUENCY">
            <summary>
            Frequency of the concentric spheres.
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.Cylinders._frequency">
            <summary>
            Frequency of the concentric cylinders.
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.Cylinders.#ctor">
            <summary>
            Create new Cylinders generator with default values
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.Cylinders.#ctor(System.Single)">
            <summary>
            Create a new Cylinders generator with given values
            </summary>
            <param name="frequency"></param>
        </member>
        <member name="M:LibNoise.Primitive.Cylinders.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Primitive.Cylinders.Frequency">
            <summary>
            Gets or sets the frequency
            </summary>
        </member>
        <member name="T:LibNoise.Primitive.ImprovedPerlin">
             <summary>
             Noise module that outputs 3-dimensional Improved Perlin noise.
            
             This noise module outputs values that usually range from
             -1.0 to +1.0, but there are no guarantees that all output values will
             exist within that range.
             </summary>
        </member>
        <member name="F:LibNoise.Primitive.ImprovedPerlin.RandomSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.ImprovedPerlin.Source">
            <summary>
            Initial permutation table
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.ImprovedPerlin._random">
            <summary>
            Stores the random values used to generate the noise
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.#ctor">
            <summary>
            0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.#ctor(System.Int32,LibNoise.NoiseQuality)">
            <summary>
            Create a new ImprovedPerlin with given values
            </summary>
            <param name="seed"></param>
            <param name="quality"></param>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.Randomize(System.Int32)">
            <summary>
            Initializes the random values
            
            </summary>
            <param name="seed">The seed used to generate the random values</param>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.GetValue(System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.Grad(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Modifies the result by adding a directional bias
            </summary>
            <param name="hash">The random value telling in which direction the bias will occur</param>
            <param name="x">The amount of the bias on the X axis</param>
            <param name="y">The amount of the bias on the Y axis</param>
            <param name="z">The amount of the bias on the Z axis</param>
            <returns>The directional bias strength</returns>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.Grad(System.Int32,System.Single,System.Single)">
            <summary>
            Modifies the result by adding a directional bias
            </summary>
            <param name="hash">The random value telling in which direction the bias will occur</param>
            <param name="x">The amount of the bias on the X axis</param>
            <param name="y">The amount of the bias on the Y axis</param>
            <returns>The directional bias strength</returns>
        </member>
        <member name="M:LibNoise.Primitive.ImprovedPerlin.Grad(System.Int32,System.Single)">
            <summary>
            Modifies the result by adding a directional bias
            </summary>
            <param name="hash">The random value telling in which direction the bias will occur</param>
            <param name="x">The amount of the bias on the X axis</param>
            <returns>The directional bias strength</returns>
        </member>
        <member name="P:LibNoise.Primitive.ImprovedPerlin.Seed">
            <summary>
            Gets or sets the seed of the perlin noise.
            </summary>
        </member>
        <member name="T:LibNoise.Primitive.SimplexPerlin">
            <summary>
            Noise module that outputs 3-dimensional Simplex Perlin noise.
            
            This algorithm has a computational cost of O(n+1) where n is the dimension.
            It's a lost faster than ImprovedPerlin (O(2^n))
            
            Quality is not used here.
            
            This noise module outputs values that usually range from
            -1.0 to +1.0, but there are no guarantees that all output values will
            exist within that range.
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.SimplexPerlin.F2">
            Skewing and unskewing factors for 2D, 3D and 4D, 
            some of them pre-multiplied.
        </member>
        <member name="F:LibNoise.Primitive.SimplexPerlin.Grad3">
            <summary>
            Gradient vectors for 3D (pointing to mid points of all edges of a unit
            cube)
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.SimplexPerlin.Grad4">
            <summary>
            Gradient vectors for 4D (pointing to mid points of all edges of a unit 4D
            hypercube)
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.SimplexPerlin.Simplex">
            <summary>
            A lookup table to traverse the simplex around a given point in 4D.
            Details can be found where this table is used, in the 4D noise method.
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.#ctor">
            <summary>
            0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.#ctor(System.Int32,LibNoise.NoiseQuality)">
            <summary>
            Create a new ImprovedPerlin with given values
            </summary>
            <param name="seed"></param>
            <param name="quality"></param>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.GetValue(System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.GetValue(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <param name="w">The input coordinate on the w-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.Dot(System.Int32[],System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes dot product in 4D.
            </summary>
            <param name="g">4-vector (grid offset).</param>
            <param name="x">X coordinates.</param>
            <param name="y">Y coordinates.</param>
            <param name="z">Z coordinates.</param>
            <param name="t">T coordinates.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.Dot(System.Int32[],System.Single,System.Single,System.Single)">
            <summary>
            Computes dot product in 3D.
            </summary>
            <param name="g">3-vector (grid offset).</param>
            <param name="x">X coordinates.</param>
            <param name="y">Y coordinates.</param>
            <param name="z">Z coordinates.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="M:LibNoise.Primitive.SimplexPerlin.Dot(System.Int32[],System.Single,System.Single)">
            <summary>
            Computes dot product in 2D.
            </summary>
            <param name="g">2-vector (grid offset).</param>
            <param name="x">X coordinates.</param>
            <param name="y">Y coordinates.</param>
            <returns>Dot product.</returns>
        </member>
        <member name="T:LibNoise.Primitive.Spheres">
             <summary>
             Noise module that outputs concentric spheres.
            
             This noise module outputs concentric spheres centered on the origin
             like the concentric rings of an onion.
            
             The first sphere has a radius of 1.0.  Each subsequent sphere has a
             radius that is 1.0 unit larger than the previous sphere.
            
             The output value from this noise module is determined by the distance
             between the input value and the the nearest spherical surface.  The
             input values that are located on a spherical surface are given the
             output value 1.0 and the input values that are equidistant from two
             spherical surfaces are given the output value -1.0.
            
             An application can change the frequency of the concentric spheres.
             Increasing the frequency reduces the distances between spheres.
            
             This noise module, modified with some low-frequency, low-power
             turbulence, is useful for generating agate-like textures.
             
             </summary>
        </member>
        <member name="F:LibNoise.Primitive.Spheres.DEFAULT_FREQUENCY">
            <summary>
            Frequency of the concentric spheres.
            </summary>
        </member>
        <member name="F:LibNoise.Primitive.Spheres._frequency">
            <summary>
            Frequency of the concentric cylinders.
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.Spheres.#ctor">
            <summary>
            Create new Spheres generator with default values
            </summary>
        </member>
        <member name="M:LibNoise.Primitive.Spheres.#ctor(System.Single)">
            <summary>
            Create a new Spheres generator with given values
            </summary>
            <param name="frequency"></param>
        </member>
        <member name="M:LibNoise.Primitive.Spheres.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Primitive.Spheres.Frequency">
            <summary>
            Gets or sets the frequency
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.AbstractHeightmapRenderer">
            <summary>
            Abstract base class for an heightmap renderer
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.AbstractRenderer">
            <summary>
            Abstract base class for a renderer
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.AbstractRenderer._callBack">
            <summary>
            The callback function that Render() calls each time it fills a
            row of the image.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.AbstractRenderer._noiseMap">
            <summary>
            The source noise map that contains the coherent-noise values.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.AbstractRenderer.Render">
             <summary>
             Renders the destination image using the contents of the source
             noise map.
            
             @pre NoiseMap has been defined.
             @pre Image has been defined.
            
             @post The original contents of the destination image is destroyed.
            
             @throw ArgumentException See the preconditions.
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.AbstractRenderer.NoiseMap">
            <summary>
            Gets or sets the source noise map
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.AbstractRenderer.CallBack">
            <summary>
            Gets or sets the callback function
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.AbstractHeightmapRenderer._WrapEnabled">
             <summary>
             If wrapping is/ enabled, and the initial point is on the edge of
             the noise map, the appropriate neighbors that lie outside of the
             noise map will "wrap" to the opposite side(s) of the noise map.
            
             Enabling wrapping is useful when creating tileable heightmap
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.AbstractHeightmapRenderer._lowerHeightBound">
            <summary>
            Lower height boundary of the heightmap
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.AbstractHeightmapRenderer._upperHeightBound">
            <summary>
            Upper height boundary of the heightmap
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.#ctor">
            <summary>
            template constructor
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.SetBounds(System.Single,System.Single)">
             <summary>
             Sets the boundaries of the heightmap.
            
             @throw ArgumentException if the lower boundary equals the upper boundary
             or if the lower boundary is greater than upper boundary
             </summary>
             <param name="lowerBound">The lower boundary of the heightmap</param>
             <param name="upperBound">The upper boundary of the heightmap</param>
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.ExactFit">
            <summary>
            Find in the noise map the lowest and highest value to define 
            the LowerHeightBound and UpperHeightBound
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.Render">
            <summary>
            Renders the destination heightmap using the contents of the source
            noise map
            </summary>
            This class defines the main algorithm, children must implement
            RenderHeight() method to render a value for the target heightmap
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.CheckHeightmap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.SetHeightmapSize(System.Int32,System.Int32)">
            <summary>
            Sets the new size for the target heightmap.
            
            </summary>
            <param name="width">width The new width for the heightmap</param>
            <param name="height">height The new height for the heightmap</param>
        </member>
        <member name="M:LibNoise.Renderer.AbstractHeightmapRenderer.RenderHeight(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="source"></param>
            <param name="boundDiff"></param>
        </member>
        <member name="P:LibNoise.Renderer.AbstractHeightmapRenderer.LowerHeightBound">
            <summary>
            Gets or sets the lower height boundary of the heightmap
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.AbstractHeightmapRenderer.UpperHeightBound">
            <summary>
            Gets or sets the upper height boundary of the heightmap
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.AbstractHeightmapRenderer.WrapEnabled">
            <summary>
            Enables or disables heightmap wrapping.
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.AbstractImageRenderer">
            <summary>
            Abstract base class for an image renderer
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.AbstractImageRenderer._image">
            <summary>
            The destination image
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.AbstractImageRenderer.Image">
            <summary>
            Gets or sets the destination image
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.RendererCallback">
             A delegate to a callback function used by the Renderer classes.
            
             The renderer method calls this callback function each
             time it fills a row of the target struct.
            
             This callback function has a single integer parameter that contains
             a count of the rows that have been completed.  It returns void.
        </member>
        <member name="T:LibNoise.Renderer.Color">
             <summary>
             Defines a color.
            
             A color object contains four 8-bit channels: red, green, blue, and an
             alpha (transparency) channel.  Channel values range from 0 to 255.
            
             The alpha channel defines the transparency of the color.  If the alpha
             channel has a value of 0, the color is completely transparent.  If the
             alpha channel has a value of 255, the color is completely opaque.
             </summary>
        </member>
        <member name="T:LibNoise.Renderer.IColor">
            <summary>
            Interface for a portable color structure.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.IColor.Alpha">
            <summary>
            The alpha channel
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.IColor.Blue">
            <summary>
            The blue channel
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.IColor.Green">
            <summary>
            The green channel
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.IColor.Red">
            <summary>
            The red channel
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Color.Rnd">
            <summary>
            Static Random generator.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Color._hashcode">
            <summary>
            Internal hashcode
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Color._alpha">
            <summary>
            Value of the alpha (transparency) channel.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Color._blue">
            <summary>
            Value of the blue channel.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Color._green">
            <summary>
            Value of the green channel.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Color._red">
            <summary>
            Value of the red channel.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Color.#ctor">
            <summary>
            0-args constructor, a solid black color (0, 0, 0, 255).
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new Color.
            </summary>
            <param name="r">Value of the red channel.</param>
            <param name="g">Value of the green channel.</param>
            <param name="b">Value of the blue channel.</param>
            <param name="a">Value of the alpha channel.</param>
        </member>
        <member name="M:LibNoise.Renderer.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new Color.
            </summary>
            <param name="r">Value of the red channel.</param>
            <param name="g">Value of the green channel.</param>
            <param name="b">Value of the blue channel.</param>
        </member>
        <member name="M:LibNoise.Renderer.Color.Equals(LibNoise.Renderer.Color)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.Lerp(LibNoise.Renderer.IColor,LibNoise.Renderer.IColor,System.Single,System.Boolean)">
            <summary>
            Performs linear interpolation between two colors only with rgb channels.
            </summary>
            <param name="color0">The first color.</param>
            <param name="color1">The second color.</param>
            <param name="t">the amount to interpolate between the two colors.</param>
            <param name="withAlphaChannel">Flag indicates if this method also interpolate alpha channel.</param>
            <returns>The interpolated color, with the same type of color0.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.Lerp32(LibNoise.Renderer.IColor,LibNoise.Renderer.IColor,System.Single)">
            <summary>
            Performs linear interpolation between two colors, including alpha channel.
            </summary>
            <param name="color0">The first color.</param>
            <param name="color1">The second color.</param>
            <param name="t">the amount to interpolate between the two colors.</param>
            <returns>The interpolated color.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.Lerp24(LibNoise.Renderer.IColor,LibNoise.Renderer.IColor,System.Single)">
            <summary>
            Performs linear interpolation between two colors only with rgb channels.
            </summary>
            <param name="color0">The first color.</param>
            <param name="color1">The second color.</param>
            <param name="t">The amount to interpolate between the two colors.</param>
            <returns>The interpolated color.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.Grayscale(LibNoise.Renderer.IColor)">
            <summary>
            Compute a grayscale value from the source color using Color.GrayscaleLuminosityStrategy.
            </summary>
            <param name="color">The source color.</param>
            <returns>The grayscale color with the same type as color.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.Grayscale(LibNoise.Renderer.IColor,LibNoise.Renderer.Color.GrayscaleStrategy)">
            <summary>
            Compute a grayscale value from the source color using the given Strategy.
            </summary>
            <param name="color">The source color.</param>
            <param name="strategy">The grayscale strategy.</param>
            <returns>The grayscale color with the same type as color.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.GrayscaleLightnessStrategy(LibNoise.Renderer.IColor)">
            <summary>
            A GrayscaleStrategy implementation
            The lightness strategy averages the most prominent and least prominent colors: 
            (max(R, G, B) + min(R, G, B)) / 2.
            </summary>
            <param name="color">The source color.</param>
            <returns>The computed channel value.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.GrayscaleAverageStrategy(LibNoise.Renderer.IColor)">
            <summary>
            A GrayscaleStrategy implementation
            The average strategy simply averages the values: (R + G + B) / 3.
            </summary>
            <param name="color">The source color.</param>
            <returns>the computed channel value.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.GrayscaleLuminosityStrategy(LibNoise.Renderer.IColor)">
            <summary>
            A GrayscaleStrategy implementation
            The luminosity strategy averages the values, but it forms a weighted average to account 
            for human perception. We’re more sensitive to green than other colors, 
            so green is weighted most heavily. 
            The formula for luminosity is 0.21f *R + 0.71f *G + 0.07f *B.
            </summary>
            <param name="color">The source color.</param>
            <returns>The computed channel value.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.op_Equality(LibNoise.Renderer.Color,LibNoise.Renderer.IColor)">
            <summary>
            Overloading '==' operator:
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.op_Inequality(LibNoise.Renderer.Color,LibNoise.Renderer.IColor)">
            <summary>
            Overloading '!=' operator:
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Color.op_GreaterThan(LibNoise.Renderer.Color,LibNoise.Renderer.IColor)">
            <summary>
            Overloading '>' operator:
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LibNoise.Renderer.Color.op_LessThan(LibNoise.Renderer.Color,LibNoise.Renderer.IColor)" -->
        <member name="M:LibNoise.Renderer.Color.op_GreaterThanOrEqual(LibNoise.Renderer.Color,LibNoise.Renderer.IColor)">
            <summary>
            Overloading '>=' operator:
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LibNoise.Renderer.Color.op_LessThanOrEqual(LibNoise.Renderer.Color,LibNoise.Renderer.IColor)" -->
        <member name="P:LibNoise.Renderer.Color.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Color.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Color.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Color.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.Color.GrayscaleStrategy">
            <summary>
            Compute a grayscale value from the source color.
            </summary>
            <param name="color">The source color.</param>
            <returns>The computed channel value.</returns>
        </member>
        <member name="T:LibNoise.Renderer.Colors">
            <summary>
            Well-known colors.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Colors.Black">
            <summary>
            Create a black color.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Colors.White">
            <summary>
            Create a white color.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Colors.Red">
            <summary>
            Create a solid red color.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Colors.Green">
            <summary>
            Create a solid green color.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Colors.Blue">
            <summary>
            Create a solid blue color.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.Colors.Transparent">
            <summary>
            Create a transparent color.
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.GradientColors">
            <summary>
            Well-known gradient colors.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.GradientColors.Grayscale">
            <summary>
            Create a graysacle GradientColor
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.GradientColors.Empty">
            <summary>
            Create an empty GradientColor
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.GradientColors.Terrain">
            <summary>
            Create an terrain  GradientColor
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.GradientColor">
             <summary>
             Defines a color gradient.
            
             A color gradient is a list of gradually-changing colors.  A color
             gradient is defined by a list of <i>gradient points</i>.  Each
             gradient point has a position and a color.  In a color gradient, the
             colors between two adjacent gradient points are linearly interpolated.
            
             To add a gradient point to the color gradient, pass its position and
             color to the AddGradientPoint() method.
            
             To retrieve a color from a specific position in the color gradient,
             pass that position to the GetColor() method.
            
             This class is a useful tool for coloring height maps based on
             elevation.
            
             <b>Gradient example</b>
            
             Suppose a gradient object contains the following gradient points:
             - -1.0 maps to black.
             - 0.0 maps to white.
             - 1.0 maps to red.
            
             If an application passes -0.5 to the GetColor() method, this method
             will return a gray color that is halfway between black and white.
            
             If an application passes 0.25 to the GetColor() method, this method
             will return a very light pink color that is one quarter of the way
             between white and red.
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.GradientColor._gradientPoints">
            <summary>
            The gradient points list
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.#ctor">
            <summary>
            Create an empty GradientColor
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.#ctor(LibNoise.Renderer.IColor)">
            <summary>
            Create a new GradientColor with one color
            </summary>
            <param name="color">color at position -1 and 1</param>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.#ctor(LibNoise.Renderer.IColor,LibNoise.Renderer.IColor)">
            <summary>
            Create a new GradientColor betwwen start and end
            </summary>
            <param name="start">The start color at position -1</param>
            <param name="end">The end color at position 1</param>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.AddGradientPoint(System.Single,LibNoise.Renderer.IColor)">
             <summary>
             Adds a gradient point to this gradient object.
            
             No two gradient points have the same position.
            
             @throw System.ArgumentException if two control points have the same position.
            
             It does not matter which order these gradient points are added.
             
             </summary>
             <param name="position">The position of this gradient point</param>
             <param name="color">The color of this gradient point</param>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.AddGradientPoint(LibNoise.Renderer.GradientPoint)">
             <summary>
             Adds a gradient point to this gradient object.
            
             No two gradient points have the same position.
            
             @throw System.ArgumentException if two control points have the same position.
            
             It does not matter which order these gradient points are added.
             </summary>
             <param name="point">The gradient point to add</param>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.Clear">
            <summary>
            Deletes all the gradient points from this gradient object.
            All gradient points from this gradient object are deleted.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.GetColor(System.Single)">
            <summary>
            Returns the color at the specified position in the color gradient.
            </summary>
            <param name="position">The specified position</param>
            <returns>The color at that position</returns>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.CountGradientPoints">
            <summary>
            Return the size of the GradientPoint list
            </summary>
            <returns>The number of GradientPoint in the list</returns>
        </member>
        <member name="M:LibNoise.Renderer.GradientColor.GetGradientPoints">
            <summary>
            Returns a read-only <see cref="T:System.Collections.Generic.IList`1"/> wrapper for the current GradientPoint list.
            </summary>
            <returns>The read only list.</returns>
        </member>
        <member name="T:LibNoise.Renderer.GradientPoint">
             <summary>
             Defines a point used to build a color gradient.
            
             A color gradient is a list of gradually-changing colors.  A color
             gradient is defined by a list of <i>gradient points</i>.  Each
             gradient point has a position and a color.  In a color gradient, the
             colors between two adjacent gradient points are linearly interpolated.
            
             The ColorGradient class defines a color gradient by a list of these
             objects.
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.GradientPoint._hashcode">
            <summary>
            Internal hashcode
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.GradientPoint.Color">
            <summary>
            The color of this gradient point.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.GradientPoint.Position">
            <summary>
            The position of this gradient point.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.GradientPoint.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:LibNoise.Renderer.Heightmap16">
            <summary>
            Implements a 16 bits Heightmap, a 2-dimensional array of unsigned short values (0 to 65 535)
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.#ctor">
            <summary>
            0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new Heightmap16 with the given values
            The width and height values must be positive.
            
            </summary>
            <param name="width">The width of the new noise map.</param>
            <param name="height">The height of the new noise map</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.#ctor(LibNoise.Renderer.Heightmap16)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">The heightmap to copy</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.MinMax(System.UInt16@,System.UInt16@)">
            <summary>
            Find the lowest and highest value in the map
            </summary>
            <param name="min">the lowest value</param>
            <param name="max">the highest value</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.SizeofT">
            <summary>
            Return the memory size of a ushort
            
            </summary>
            <returns>The memory size of a ushort</returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.MaxvalofT">
            <summary>
            Return the maximum value of a ushort type (65535)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16.MinvalofT">
            <summary>
            Return the minimum value of a ushort type (0)
            </summary>
            <returns></returns>
        </member>
        <member name="T:LibNoise.Renderer.Heightmap16Renderer">
            <summary>
            class for an 16bit-heightmap renderer
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Heightmap16Renderer._heightmap">
            <summary>
            The destination heightmap
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16Renderer.SetHeightmapSize(System.Int32,System.Int32)">
            <summary>
            Sets the new size for the target heightmap.
            
            </summary>
            <param name="width">width The new width for the heightmap</param>
            <param name="height">height The new height for the heightmap</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16Renderer.CheckHeightmap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap16Renderer.RenderHeight(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="source"></param>
            <param name="boundDiff"></param>
        </member>
        <member name="P:LibNoise.Renderer.Heightmap16Renderer.Heightmap">
            <summary>
            Gets or sets the destination heightmap
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.Heightmap32">
            <summary>
            Implements a 32 bits Heightmap, a 2-dimensional array of float values (+-1.5 x 10^−45 to +-3.4 x 10^38)
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap32.#ctor">
            <summary>
            0-args constructor
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap32.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new Heightmap32 with the given values
            The width and height values must be positive.
            
            </summary>
            <param name="width">The width of the new noise map.</param>
            <param name="height">The height of the new noise map</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap32.#ctor(LibNoise.Renderer.Heightmap32)">
            <summary>
            Copy constructor
            </summary>
            <param name="copy">The heightmap to copy</param>
        </member>
        <member name="T:LibNoise.Renderer.Heightmap32Renderer">
            <summary>
            class for an 32bit-heightmap renderer
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Heightmap32Renderer._heightmap">
            <summary>
            The destination heightmap
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap32Renderer.SetHeightmapSize(System.Int32,System.Int32)">
            <summary>
            Sets the new size for the target heightmap.
            
            </summary>
            <param name="width">width The new width for the heightmap</param>
            <param name="height">height The new height for the heightmap</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap32Renderer.CheckHeightmap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap32Renderer.RenderHeight(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="source"></param>
            <param name="boundDiff"></param>
        </member>
        <member name="P:LibNoise.Renderer.Heightmap32Renderer.Heightmap">
            <summary>
            Gets or sets the destination heightmap
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.Heightmap8">
            <summary>
            Implements a 8 bits Heightmap, a 2-dimensional array of unsigned byte values (0 to 255).
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.#ctor">
            <summary>
            0-args constructor.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new Heightmap8 with the given values
            The width and height values must be positive. 
            </summary>
            <param name="width">The width of the new noise map.</param>
            <param name="height">The height of the new noise map</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.#ctor(LibNoise.Renderer.Heightmap8)">
            <summary>
            Copy constructor.
            </summary>
            <param name="copy">The heightmap to copy.</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.MinMax(System.Byte@,System.Byte@)">
            <summary>
            Find the lowest and highest value in the map.
            </summary>
            <param name="min">The lowest value.</param>
            <param name="max">The highest value.</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.SizeofT">
            <summary>
            Return the memory size of a unsigned byte. 
            </summary>
            <returns>The memory size of a unsigned byte.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.MaxvalofT">
            <summary>
            Return the maximum value of a unsigned byte type (255).
            </summary>
            <returns>Maximum value.</returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8.MinvalofT">
            <summary>
            Return the minimum value of a unsigned byte type (0).
            </summary>
            <returns>Minimum value.</returns>
        </member>
        <member name="T:LibNoise.Renderer.Heightmap8Renderer">
            <summary>
            class for an 8bit-heightmap renderer
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Heightmap8Renderer._heightmap">
            <summary>
            The destination heightmap
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8Renderer.SetHeightmapSize(System.Int32,System.Int32)">
            <summary>
            Sets the new size for the target heightmap.
            
            </summary>
            <param name="width">width The new width for the heightmap</param>
            <param name="height">height The new height for the heightmap</param>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8Renderer.CheckHeightmap">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Heightmap8Renderer.RenderHeight(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="source"></param>
            <param name="boundDiff"></param>
        </member>
        <member name="P:LibNoise.Renderer.Heightmap8Renderer.Heightmap">
            <summary>
            Gets or sets the destination heightmap
            </summary>
        </member>
        <member name="T:LibNoise.Renderer.Image">
             <summary>
             Implements an image, a 2-dimensional array of color values.
            
             An image can be used to store a color texture.
            
             These color values are of type Color.
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.Image.RasterMaxWidth">
            <summary>
            The maximum width of a raster.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.Image.RasterMaxHeight">
            <summary>
            The maximum height of a raster.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Image.#ctor">
            <summary>
            Create an empty Image
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.Image.#ctor(System.Int32,System.Int32)">
             <summary>
             Create a new Image with the given values
            
             The width and height values are positive.
             The width and height values do not exceed the maximum
             possible width and height for the image.
            
             @throw System.ArgumentException See the preconditions.
             @throw noise::ExceptionOutOfMemory Out of memory.
            
             Creates a image with uninitialized values.
            
             It is considered an error if the specified dimensions are not
             positive.
             </summary>
             <param name="width">The width of the new noise map.</param>
             <param name="height">The height of the new noise map</param>
        </member>
        <member name="M:LibNoise.Renderer.Image.#ctor(LibNoise.Renderer.Image)">
            <summary>
            Copy constructor
            @throw noise::ExceptionOutOfMemory Out of memory.
            </summary>
            <param name="copy">The image to copy</param>
        </member>
        <member name="M:LibNoise.Renderer.Image.MinMax(LibNoise.Renderer.Color@,LibNoise.Renderer.Color@)">
            <summary>
            Find the lowest and highest value in the map
            </summary>
            <param name="min">the lowest value</param>
            <param name="max">the highest value</param>
        </member>
        <member name="M:LibNoise.Renderer.Image.SizeofT">
            <summary>
            Return the memory size of a Color
            
            </summary>
            <returns>The memory size of a Color</returns>
        </member>
        <member name="M:LibNoise.Renderer.Image.MaxvalofT">
            <summary>
            Return the maximum value of a Color type (Solid white)
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibNoise.Renderer.Image.MinvalofT">
            <summary>
            Return the minimum value of a Color type (Solid black)
            </summary>
            <returns></returns>
        </member>
        <member name="T:LibNoise.Renderer.ImageRenderer">
             <summary>
             Renders an image from a noise map.
            
             This class renders an image given the contents of a noise-map object.
            
             An application can configure the output of the image in three ways:
             - Specify the color gradient.
             - Specify the light source parameters.
             - Specify the background image.
            
             <b>Specify the color gradient</b>
            
             This class uses a color gradient to calculate the color for each pixel
             in the destination image according to the value from the corresponding
             position in the noise map.
            
             A color gradient is a list of gradually-changing colors.  A color
             gradient is defined by a list of <i>gradient points</i>.  Each
             gradient point has a position and a color.  In a color gradient, the
             colors between two adjacent gradient points are linearly interpolated.
            
             For example, suppose this class contains the following color gradient:
            
             - -1.0 maps to dark blue.
             - -0.2 maps to light blue.
             - -0.1 maps to tan.
             - 0.0 maps to green.
             - 1.0 maps to white.
            
             The value 0.5 maps to a greenish-white color because 0.5 is halfway
             between 0.0 (mapped to green) and 1.0 (mapped to white).
            
             The value -0.6 maps to a medium blue color because -0.6 is halfway
             between -1.0 (mapped to dark blue) and -0.2 (mapped to light blue).
            
             The color gradient requires a minimum of two gradient points.
            
             @note The color value ie the gradient color has an alpha
             channel.  This alpha channel specifies how a pixel in the background
             image (if specified) is blended with the calculated color.  If the
             alpha value is high, this class weighs the blend towards the
             calculated color, and if the alpha value is low, this class weighs the
             blend towards the color from the corresponding pixel in the background
             image.
            
             <b>Specify the light source parameters</b>
            
             This class contains a parallel light source that lights the image.  It
             interprets the noise map as a bump map.
            
             To enable or disable lighting, pass a Boolean value to the
             EnableLight property.
            
             To set the position of the light source in the "sky", use the
             LightAzimuth and LightElevation properties.
            
             To set the color of the light source, use the LightColor property.
            
             To set the intensity of the light source, use the LightIntensity property.  
             A good intensity value is 2.0, although that value tends to
             "wash out" very light colors from the image.
             
             To set the contrast amount between areas in light and areas in shadow,
             use the LightContrast property.  Determining the correct contrast
             amount requires some trial and error, but if your application
             interprets the noise map as a height map that has its elevation values
             measured in meters and has a horizontal resolution of h meters, a
             good contrast amount to use is ( 1.0 / h ).
             
             <b>Specify the background image</b>
            
             To specify a background image, pass an Image object to the
             BackgroundImage property.
            
             This class determines the color of a pixel in the destination image by
             blending the calculated color with the color of the corresponding
             pixel from the background image.
            
             The blend amount is determined by the alpha of the calculated color.
             If the alpha value is high, this class weighs the blend towards the
             calculated color, and if the alpha value is low, this class weighs the
             blend towards the color from the corresponding pixel in the background
             image.
            
             <b>Rendering the image</b>
            
             To render the image, perform the following steps:
             - Pass a <see cref="T:LibNoise.Renderer.GradientColor"/> object to the Gradient property.
             - Pass a <see cref="T:LibNoise.IMap2D`1"/> object to the NoiseMap property.
             - Pass an <see cref="T:LibNoise.IMap2D`1"/> object to the Image property.
             - Pass an <see cref="T:LibNoise.Renderer.Image"/> object to the BackgroundImage property (optional)
             - Call the Render() method.
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._wrapEnabled">
            <summary>
            A flag specifying whether wrapping is enabled.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._backgroundImage">
            <summary>
            The background image
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._cosAzimuth">
            <summary>
            The cosine of the azimuth of the light source.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._cosElevation">
            <summary>
            The cosine of the elevation of the light source.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._gradient">
            <summary>
            The gradient color
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightAzimuth">
            <summary>
            The azimuth of the light source, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightBrightness">
            <summary>
            The brightness of the light source.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightColor">
            <summary>
            The color of the light source.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightContrast">
            <summary>
            The contrast between areas in light and areas in shadow.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightElevation">
            <summary>
            The elevation of the light source, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightEnabled">
            <summary>
            A flag specifying whether lighting is enabled.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._lightIntensity">
            <summary>
            The intensity of the light source.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._recalcLightValues">
             <summary>
             Used by the CalcLightIntensity() method to recalculate the light
             values only if the light parameters change.
            
             When the light parameters change, this value is set to True.  When
             the CalcLightIntensity() method is called, this value is set to
             false.
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._sinAzimuth">
            <summary>
            The sine of the azimuth of the light source.
            </summary>
        </member>
        <member name="F:LibNoise.Renderer.ImageRenderer._sinElevation">
            <summary>
            The sine of the elevation of the light source.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.ImageRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.ImageRenderer.Render">
             <summary>
             Renders the destination image using the contents of the source
             noise map and an optional background image.
            
             @pre NoiseMap has been defined.
             @pre Image has been defined.
             @pre There are at least two gradient points in the color gradient.
             @pre No two gradient points have the same position.
             @pre If a background image was specified, it has the exact same
             size as the source height map.
            
             @post The original contents of the destination image is destroyed.
            
             @throw ArgumentException See the preconditions.
            
             The background image and the destination image can safely refer to
             the same image, although in this case, the destination image is
             irretrievably blended into the background image.
             </summary>
        </member>
        <member name="M:LibNoise.Renderer.ImageRenderer.CalcDestColor(LibNoise.Renderer.IColor,LibNoise.Renderer.IColor,System.Single)">
            <summary>
            Calculates the destination color.
            </summary>
            <param name="sourceColor">The source color generated from the color gradient</param>
            <param name="backgroundColor">The color from the background image at the corresponding position</param>
            <param name="lightValue">The intensity of the light at that position</param>
            <returns>The destination color</returns>
        </member>
        <member name="M:LibNoise.Renderer.ImageRenderer.CalcLightIntensity(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates the intensity of the light given some elevation values.
            </summary>
            <param name="center">Elevation of the center point</param>
            <param name="left">Elevation of the point directly left of the center point</param>
            <param name="right">Elevation of the point directly right of the center point</param>
            <param name="down">Elevation of the point directly below the center point</param>
            <param name="up">Elevation of the point directly above the center point</param>
            <returns>These values come directly from the noise map</returns>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightEnabled">
             <summary>
             Enables or disables the light source.
            
             If the light source is enabled, this object will interpret the
             noise map as a bump map.
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.WrapEnabled">
             <summary>
             Enables or disables noise-map wrapping.
            
             This object requires five points (the initial point and its four
             neighbors) to calculate light shading.  If wrapping is enabled,
             and the initial point is on the edge of the noise map, the
             appropriate neighbors that lie outside of the noise map will
             "wrap" to the opposite side(s) of the noise map.  Otherwise, the
             appropriate neighbors are cropped to the edge of the noise map.
            
             Enabling wrapping is useful when creating spherical renderings and
             tileable textures.
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.BackgroundImage">
            <summary>
            Gets or sets the destination image
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.Gradient">
            <summary>
            Gets or sets the gradient color
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightAzimuth">
             <summary>
             Gets or Sets the azimuth of the light source, in degrees.
            
             The azimuth is the location of the light source around the
             horizon:
             - 0.0 degrees is east.
             - 90.0 degrees is north.
             - 180.0 degrees is west.
             - 270.0 degrees is south.
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightBrightness">
            <summary>
            Gets ors sets the brightness of the light source.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightContrast">
             <summary>
             Gets or sets the contrast of the light source.
            
             The contrast specifies how sharp the boundary is between the
             light-facing areas and the shadowed areas.
            
             The contrast determines the difference between areas in light and
             areas in shadow.  Determining the correct contrast amount requires
             some trial and error, but if your application interprets the noise
             map as a height map that has a spatial resolution of h meters
             and an elevation resolution of 1 meter, a good contrast amount to
             use is ( 1.0 / h ).
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightElevation">
             <summary>
             Gets or sets the elevation of the light source, in degrees.
            
             The elevation is the angle above the horizon:
             - 0 degrees is on the horizon.
             - 90 degrees is straight up.
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightIntensity">
            <summary>
            Gets or sets the intensity of the light source.
            </summary>
        </member>
        <member name="P:LibNoise.Renderer.ImageRenderer.LightColor">
            <summary>
            Gets or sets the color of the light source.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LibNoise.Renderer.NormalMapRenderer" -->
        <member name="F:LibNoise.Renderer.NormalMapRenderer._WrapEnabled">
             <summary>
             This object requires three points (the initial point and the right
             and up neighbors) to calculate the normal vector at that point.
             If wrapping is/ enabled, and the initial point is on the edge of
             the noise map, the appropriate neighbors that lie outside of the
             noise map will "wrap" to the opposite side(s) of the noise map.
             Otherwise, the appropriate neighbors are cropped to the edge of
             the noise map.
            
             Enabling wrapping is useful when creating spherical and tileable
             normal maps.
             </summary>
        </member>
        <member name="F:LibNoise.Renderer.NormalMapRenderer._bumpHeight">
             <summary>
             The bump height specifies the ratio of spatial resolution to
             elevation resolution.  For example, if your noise map has a
             spatial resolution of 30 meters and an elevation resolution of one
             meter, set the bump height to 1.0 / 30.0.
            
             The spatial resolution and elevation resolution are determined by
             the application.
             </summary>
        </member>
        <member name="M:LibNoise.Renderer.NormalMapRenderer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.NormalMapRenderer.Render">
            <summary>
            Renders the noise map to the destination image.
            </summary>
        </member>
        <member name="M:LibNoise.Renderer.NormalMapRenderer.CalcNormalColor(System.Single,System.Single,System.Single,System.Single)">
             <summary>
             Calculates the normal vector at a given point on the noise map.
             
             This method encodes the (x, y, z) components of the normal vector
             into the (red, green, blue) channels of the returned color.  In
             order to represent the vector as a color, each coordinate of the
             normal is mapped from the -1.0 to 1.0 range to the 0 to 255 range.
            
             The bump height specifies the ratio of spatial resolution to
             elevation resolution.  For example, if your noise map has a
             spatial resolution of 30 meters and an elevation resolution of one
             meter, set the bump height to 1.0 / 30.0.
             
             The spatial resolution and elevation resolution are determined by
             the application.
             </summary>
             <param name="nc">The height of the given point in the noise map</param>
             <param name="nr">The height of the left neighbor</param>
             <param name="nu">The height of the up neighbor</param>
             <param name="bumpHeight">The bump height</param>
             <returns>The normal vector represented as a color</returns>
        </member>
        <member name="P:LibNoise.Renderer.NormalMapRenderer.WrapEnabled">
             <summary>
             Enables or disables noise-map wrapping.
            
             This object requires five points (the initial point and its four
             neighbors) to calculate light shading.  If wrapping is enabled,
             and the initial point is on the edge of the noise map, the
             appropriate neighbors that lie outside of the noise map will
             "wrap" to the opposite side(s) of the noise map.  Otherwise, the
             appropriate neighbors are cropped to the edge of the noise map.
            
             Enabling wrapping is useful when creating spherical renderings and
             tileable textures.
             </summary>
        </member>
        <member name="P:LibNoise.Renderer.NormalMapRenderer.BumpHeight">
            <summary>
            Gets or Sets the bump height
            </summary>
        </member>
        <member name="T:LibNoise.SelectorModule">
            <summary>
            Base class for all selector modules
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Blend">
             <summary>
             Noise module that outputs a weighted blend of the output values from
             two source modules given the output value supplied by a control module.
            
             - LeftModule outputs one of the values to blend.
             - RightModule outputs one of the values to blend.
             - ControlModule is known as the <i>control
               module</i>.  The control module determines the weight of the
               blending operation.  Negative values weigh the blend towards the
               output value from the LeftModule.
               Positive values weigh the blend towards the output value from the
               ReftModule.
               
             This noise module uses linear interpolation to perform the blending
             operation.
            
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Blend._controlModule">
            <summary>
            The control module
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Blend._leftModule">
            <summary>
            The left input module
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Blend._rightModule">
            <summary>
            The right input module
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Blend.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Modifier.Blend.LeftModule">
            <summary>
            Gets or sets the left module
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Blend.RightModule">
            <summary>
            Gets or sets the right module
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Blend.ControlModule">
            <summary>
            Gets or sets the control module
            </summary>
        </member>
        <member name="T:LibNoise.Modifier.Select">
             <summary>
             Noise module that outputs the value selected from one of two source
             modules chosen by the output value from a control module.
            
             - LeftModule outputs a value.
             - RightModule outputs a value.
             - ControlModule is known as the <i>control
               module</i>.  The control module determines the value to select.  If
               the output value from the control module is within a range of values
               known as the <i>selection range</i>, this noise module outputs the
               value from the RightModule.  Otherwise, this noise module outputs the value 
               from the LeftModule
            
             By default, there is an abrupt transition between the output values
             from the two source modules at the selection-range boundary.  To
             smooth the transition, pass a non-zero value to the EdgeFalloff
             method.  Higher values result in a smoother transition.
            
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select.DEFAULT_FALL_OFF">
            <summary>
            Default edge-falloff value for the Select noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select.DEFAULT_LOWER_BOUND">
            <summary>
            Default lower bound of the selection range for the
            Select noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select.DEFAULT_UPPER_BOUND">
            <summary>
            Default upper bound of the selection range for the
            Select noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select._controlModule">
            <summary>
            
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select._edgeFalloff">
             <summary>
             The falloff value is the width of the edge transition at either
             edge of the selection range.
            
             By default, there is an abrupt transition between the values from
             the two source modules at the boundaries of the selection range.
            
             For example, if the selection range is 0.5 to 0.8, and the edge
             falloff value is 0.1, then the GetValue() method outputs:
             - the output value from the source module with an index value of 0
               if the output value from the control module is less than 0.4
               ( = 0.5 - 0.1).
             - a linear blend between the two output values from the two source
               modules if the output value from the control module is between
               0.4 ( = 0.5 - 0.1) and 0.6 ( = 0.5 + 0.1).
             - the output value from the source module with an index value of 1
               if the output value from the control module is between 0.6
               ( = 0.5 + 0.1) and 0.7 ( = 0.8 - 0.1).
             - a linear blend between the output values from the two source
               modules if the output value from the control module is between
               0.7 ( = 0.8 - 0.1 ) and 0.9 ( = 0.8 + 0.1).
             - the output value from the source module with an index value of 0
               if the output value from the control module is greater than 0.9
               ( = 0.8 + 0.1).
             </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select._leftModule">
            <summary>
            The left input module
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select._lowerBound">
            <summary>
            Lower bound of the selection range.
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select._rightModule">
            <summary>
            The right input module
            </summary>
        </member>
        <member name="F:LibNoise.Modifier.Select._upperBound">
            <summary>
            Upper bound of the selection range.
            </summary>
        </member>
        <member name="M:LibNoise.Modifier.Select.SetBounds(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="lower"></param>
            <param name="upper"></param>
        </member>
        <member name="M:LibNoise.Modifier.Select.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Modifier.Select.LowerBound">
            <summary>
            gets the lower bound
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Select.UpperBound">
            <summary>
            gets the upper bound
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Select.EdgeFalloff">
            <summary>
            Gets or sets the falloff value at the edge transition.
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Select.LeftModule">
            <summary>
            Gets or sets the left module
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Select.RightModule">
            <summary>
            Gets or sets the right module
            </summary>
        </member>
        <member name="P:LibNoise.Modifier.Select.ControlModule">
            <summary>
            Gets or sets the control module
            </summary>
        </member>
        <member name="T:LibNoise.TransformerModule">
            <summary>
            
            </summary>
        </member>
        <member name="T:LibNoise.Transformer.Displace">
             <summary>
             Noise module that uses three source modules to displace each
             coordinate of the input value before returning the output value from
             a source module.
            
             Roles in the displacement operation:
             - SourceModule outputs a value.
             - XDisplaceModule specifies the offset to
               apply to the x coordinate of the input value.
             - YDisplaceModule specifies the
               offset to apply to the y coordinate of the input value.
             - YDisplaceModule specifies the offset
               to apply to the z coordinate of the input value.
            
             The GetValue() method modifies the ( x, y, z ) coordinates of
             the input value using the output values from the three displacement
             modules before retrieving the output value from the source module.
            
             The Turbulence noise module is a special case of the
             displacement module; internally, there are three Perlin-noise modules
             that perform the displacement operation.
             </summary>
        </member>
        <member name="F:LibNoise.Transformer.Displace._sourceModule">
            <summary>
            The source input module
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Displace._xDisplaceModule">
            <summary>
            Displacement module that displaces the x coordinate.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Displace._yDisplaceModule">
            <summary>
            Displacement module that displaces the y coordinate.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Displace._zDisplaceModule">
            <summary>
            Displacement module that displaces the z coordinate.
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.Displace.#ctor">
            <summary>
            Create a new noise module with default values
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.Displace.#ctor(LibNoise.IModule,LibNoise.IModule,LibNoise.IModule,LibNoise.IModule)">
            <summary>
            Create a new noise module with the given values
            </summary>
            <param name="source">the source module</param>
            <param name="xDisplaceModule">the displacement module that displaces the x coordinate</param>
            <param name="yDisplaceModule">the displacement module that displaces the y coordinate</param>
            <param name="zDisplaceModule">the displacement module that displaces the z coordinate</param>
        </member>
        <member name="M:LibNoise.Transformer.Displace.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Transformer.Displace.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Displace.XDisplaceModule">
            <summary>
            Gets or sets the displacement module that displaces the x coordinate.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Displace.YDisplaceModule">
            <summary>
            Gets or sets the displacement module that displaces the y coordinate.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Displace.ZDisplaceModule">
            <summary>
            Gets or sets the displacement module that displaces the z coordinate.
            </summary>
        </member>
        <member name="T:LibNoise.Transformer.RotatePoint">
             <summary>
             Noise module that rotates the input value around the origin before
             returning the output value from a source module.
            
             The GetValue() method rotates the coordinates of the input value
             around the origin before returning the output value from the source
             module.  To set the rotation angles, call the SetAngles() method.  To
             set the rotation angle around the individual x, y, or z axes,
             set the XAngle, YAngle or ZAngle properties,
             respectively.
            
             The coordinate system of the input value is assumed to be
             "left-handed" (x increases to the right, y increases upward,
             and z increases inward.)
             </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint.DefaultRotateX">
            <summary>
            Default x rotation angle for the RotatePoint noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint.DefaultRotateY">
            <summary>
            Default y rotation angle for the RotatePoint noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint.DefaultRotateZ">
            <summary>
            Default z rotation angle for the RotatePoint noise module.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._sourceModule">
            <summary>
            The source input module
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._x1Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._x2Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._x3Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._xAngle">
            <summary>
            x rotation angle applied to the input value, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._y1Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._y2Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._y3Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._yAngle">
            <summary>
            y rotation angle applied to the input value, in degrees.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._z1Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._z2Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._z3Matrix">
            <summary>
            An entry within the 3x3 rotation matrix used for rotating the
            input value.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.RotatePoint._zAngle">
            <summary>
            z rotation angle applied to the input value, in degrees.
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.RotatePoint.#ctor">
            <summary>
            Create a new noise module with default values
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.RotatePoint.#ctor(LibNoise.IModule)">
            <summary>
            Create a new noise module with given values
            </summary>
            <param name="source">the source module</param>
        </member>
        <member name="M:LibNoise.Transformer.RotatePoint.#ctor(LibNoise.IModule,System.Single,System.Single,System.Single)">
            <summary>
            Create a new noise module with the given values
            </summary>
            <param name="source">The input source module</param>
            <param name="xAngle">the x rotation angle applied to the input value, in degrees.</param>
            <param name="yAngle">the y rotation angle applied to the input value, in degrees.</param>
            <param name="zAngle">the z rotation angle applied to the input value, in degrees.</param>
        </member>
        <member name="M:LibNoise.Transformer.RotatePoint.SetAngles(System.Single,System.Single,System.Single)">
            <summary>
            Sets the rotation angles around all three axes to apply to the
            input value.
            </summary>
            <param name="xAngle">the x rotation angle applied to the input value, in degrees.</param>
            <param name="yAngle">the y rotation angle applied to the input value, in degrees.</param>
            <param name="zAngle">the z rotation angle applied to the input value, in degrees.</param>
        </member>
        <member name="M:LibNoise.Transformer.RotatePoint.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Transformer.RotatePoint.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.RotatePoint.XAngle">
            <summary>
            Gets or sets the x rotation angle applied to the input value, in degrees.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.RotatePoint.YAngle">
            <summary>
            Gets or sets the y rotation angle applied to the input value, in degrees.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.RotatePoint.ZAngle">
            <summary>
            Gets or sets the z rotation angle applied to the input value, in degrees.
            </summary>
        </member>
        <member name="T:LibNoise.Transformer.ScalePoint">
             <summary>
             Noise module that scales the coordinates of the input value before
             returning the output value from a source module.
            
             The GetValue() method multiplies the (x, y, z) coordinates
             of the input value with a scaling factor before returning the output
             value from the source module. 
            
             </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint.DEFAULT_POINT_X">
            <summary>
            The default scaling factor applied to the x coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint.DEFAULT_POINT_Y">
            <summary>
            The default scaling factor applied to the y coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint.DEFAULT_POINT_Z">
            <summary>
            The default scaling factor applied to the z coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint._sourceModule">
            <summary>
            The source input module
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint._xScale">
            <summary>
            the scaling factor applied to the x coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint._yScale">
            <summary>
            the scaling factor applied to the y coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.ScalePoint._zScale">
            <summary>
            the scaling factor applied to the z coordinate
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.ScalePoint.#ctor">
            <summary>
            Create a new noise module with default values
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.ScalePoint.#ctor(LibNoise.IModule,System.Single,System.Single,System.Single)">
            <summary>
            Create a new noise module with given values
            </summary>
            <param name="source">the source module</param>
            <param name="x">the scaling factor applied to the x coordinate</param>
            <param name="y">the scaling factor applied to the y coordinate</param>
            <param name="z">the scaling factor applied to the z coordinate</param>
        </member>
        <member name="M:LibNoise.Transformer.ScalePoint.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Transformer.ScalePoint.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.ScalePoint.XScale">
            <summary>
            Gets or sets the scaling factor applied to the x coordinate
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.ScalePoint.YScale">
            <summary>
            Gets or sets the scaling factor applied to the y coordinate
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.ScalePoint.ZScale">
            <summary>
            Gets or sets the scaling factor applied to the z coordinate
            </summary>
        </member>
        <member name="T:LibNoise.Transformer.TranslatePoint">
             <summary>
             Noise module that moves the coordinates of the input value before
             returning the output value from a source module.
            
             The GetValue() method moves the ( x, y, z ) coordinates of
             the input value by a translation amount before returning the output
             value from the source module. 
            
            
             </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint.DEFAULT_TRANSLATE_X">
            <summary>
            The default translation amount to apply to the x coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint.DEFAULT_TRANSLATE_Y">
            <summary>
            The default translation amount to apply to the y coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint.DEFAULT_TRANSLATE_Z">
            <summary>
            The default translation amount to apply to the z coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint._sourceModule">
            <summary>
            The source input module
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint._xTranslate">
            <summary>
            the translation amount to apply to the x coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint._yTranslate">
            <summary>
            the translation amount to apply to the y coordinate
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.TranslatePoint._zTranslate">
            <summary>
            the translation amount to apply to the z coordinate
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.TranslatePoint.#ctor">
            <summary>
            Create a new noise module with default values
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.TranslatePoint.#ctor(LibNoise.IModule)">
            <summary>
            Create a new noise module with given values
            </summary>
            <param name="source">the source module</param>
        </member>
        <member name="M:LibNoise.Transformer.TranslatePoint.#ctor(LibNoise.IModule,System.Single,System.Single,System.Single)">
            <summary>
            Create a new noise module with given values
            </summary>
            <param name="source">the source module</param>
            <param name="x">the translation amount to apply to the x coordinate</param>
            <param name="y">the translation amount to apply to the y coordinate</param>
            <param name="z">the translation amount to apply to the z coordinate</param>
        </member>
        <member name="M:LibNoise.Transformer.TranslatePoint.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Transformer.TranslatePoint.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.TranslatePoint.XTranslate">
            <summary>
            Gets or sets the translation amount to apply to the x coordinate
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.TranslatePoint.YTranslate">
            <summary>
            Gets or sets the translation amount to apply to the y coordinate
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.TranslatePoint.ZTranslate">
            <summary>
            Gets or sets the translation amount to apply to the z coordinate
            </summary>
        </member>
        <member name="T:LibNoise.Transformer.Turbulence">
             <summary>
             Noise module that randomly displaces the input value before
             returning the output value from a source module.
            
             Turbulence is the pseudo-random displacement of the input value.
             The GetValue() method randomly displaces the ( x, y, z )
             coordinates of the input value before retrieving the output value from
             the source module.
            
             The power of the turbulence determines the scaling factor that is
             applied to the displacement amount.  To specify the power, use the
             Power property.
            
             Use of this noise module may require some trial and error.  Assuming
             that you are using a generator module as the source module, you
             should first set the power to the reciprocal of the frequency.
             
            
             Displacing the input values result in more realistic terrain and
             textures.  If you are generating elevations for terrain height maps,
             you can use this noise module to produce more realistic mountain
             ranges or terrain features that look like flowing lava rock.  If you
             are generating values for textures, you can use this noise module to
             produce realistic marble-like or "oily" textures.
            
             Internally, there are three noise modules
             that displace the input value; one for the x, one for the y,
             and one for the z coordinate.
             </summary>
        </member>
        <member name="F:LibNoise.Transformer.Turbulence.DEFAULT_POWER">
            <summary>
            Default power for the Turbulence noise module
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Turbulence._power">
            <summary>
            The power (scale) of the displacement.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Turbulence._sourceModule">
            <summary>
            The source input module
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Turbulence._xDistortModule">
            <summary>
            Noise module that displaces the x coordinate.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Turbulence._yDistortModule">
            <summary>
            Noise module that displaces the y coordinate.
            </summary>
        </member>
        <member name="F:LibNoise.Transformer.Turbulence._zDistortModule">
            <summary>
            Noise module that displaces the z coordinate.
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.Turbulence.#ctor">
            <summary>
            Create a new noise module with default values
            </summary>
        </member>
        <member name="M:LibNoise.Transformer.Turbulence.#ctor(LibNoise.IModule)">
            <summary>
            Create a new noise module with the given values
            </summary>
            <param name="source">the source module</param>
        </member>
        <member name="M:LibNoise.Transformer.Turbulence.#ctor(LibNoise.IModule,LibNoise.IModule,LibNoise.IModule,LibNoise.IModule,System.Single)">
            <summary>
            Create a new noise module with the given values.
            </summary>
            <param name="source">the source module</param>
            <param name="xDistortModule">the noise module that displaces the x coordinate</param>
            <param name="yDistortModule">the noise module that displaces the y coordinate</param>
            <param name="zDistortModule">the noise module that displaces the z coordinate</param>
            <param name="power">the power of the turbulence</param>
        </member>
        <member name="M:LibNoise.Transformer.Turbulence.GetValue(System.Single,System.Single,System.Single)">
            <summary>
            Generates an output value given the coordinates of the specified input value.
            </summary>
            <param name="x">The input coordinate on the x-axis.</param>
            <param name="y">The input coordinate on the y-axis.</param>
            <param name="z">The input coordinate on the z-axis.</param>
            <returns>The resulting output value.</returns>
        </member>
        <member name="P:LibNoise.Transformer.Turbulence.SourceModule">
            <summary>
            Gets or sets the source module
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Turbulence.XDistortModule">
            <summary>
            Gets or sets the noise module that displaces the x coordinate.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Turbulence.YDistortModule">
            <summary>
            Gets or sets the noise module that displaces the y coordinate.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Turbulence.ZDistortModule">
            <summary>
            Gets or sets the noise module that displaces the z coordinate.
            </summary>
        </member>
        <member name="P:LibNoise.Transformer.Turbulence.Power">
             <summary>
             Returns the power of the turbulence.
            
             The power of the turbulence determines the scaling factor that is
             applied to the displacement amount.
             </summary>
        </member>
        <member name="T:LibNoise.Writer.AbstractWriter">
            <summary>
            Abstract base class for all writer classes
            </summary>
        </member>
        <member name="F:LibNoise.Writer.AbstractWriter._filename">
            <summary>
            the name of the file to write.
            </summary>
        </member>
        <member name="F:LibNoise.Writer.AbstractWriter._writer">
            <summary>
            A binary writer
            </summary>
        </member>
        <member name="M:LibNoise.Writer.AbstractWriter.WriteFile">
            <summary>
            Writes the destination content
            </summary>
        </member>
        <member name="M:LibNoise.Writer.AbstractWriter.OpenFile">
            <summary>
            Create a new BinaryWriter
            </summary>
        </member>
        <member name="M:LibNoise.Writer.AbstractWriter.CloseFile">
            <summary>
            Release a BinaryWriter previously opened
            </summary>
        </member>
        <member name="P:LibNoise.Writer.AbstractWriter.Filename">
            <summary>
            Gets or sets the name of the file to write.
            </summary>
        </member>
        <member name="T:LibNoise.Writer.BMPWriter">
             <summary>
             Windows bitmap image writer class.
            
             This class creates a file in Windows bitmap (*.bmp) format given the
             contents of an image object.
            
             <b>Writing the image</b>
            
             To write the image to a file, perform the following steps:
             - Pass the filename to the Filename property.
             - Pass an Image object to the Image property.
             - Call the WriteFile().
             
             TODO convert BMPWriter to an extensible writing strategy based on image format (bmp, png, jpg, ...)
             </summary>
        </member>
        <member name="F:LibNoise.Writer.BMPWriter.BMP_HEADER_SIZE">
            <summary>
            Bitmap header size.
            </summary>
        </member>
        <member name="F:LibNoise.Writer.BMPWriter._image">
            <summary>
            The destination image
            </summary>
        </member>
        <member name="M:LibNoise.Writer.BMPWriter.WriteFile">
             <summary>
             Writes the contents of the image object to the file.
            
             @pre Filename has been previously defined.
             @pre Image has been previously defined.
            
             @throw ArgumentException See the preconditions.
             @throw IOException An I/O exception occurred.
             
             Possibly the file could not be written.
             
             </summary>
        </member>
        <member name="M:LibNoise.Writer.BMPWriter.CalcWidthByteCount(System.Int32)">
             <summary>
             Calculates the width of one horizontal line in the file, in bytes.
            
             Windows bitmap files require that the width of one horizontal line
             must be aligned to a 32-bit boundary.
             </summary>
             <param name="width">The width of the image, in points</param>
             <returns>The width of one horizontal line in the file</returns>
        </member>
        <member name="P:LibNoise.Writer.BMPWriter.Image">
            <summary>
            Gets or sets the destination image
            </summary>
        </member>
        <member name="T:LibNoise.Writer.Heightmap16RawWriter">
            <summary>
            Heightmap writer class, raw format.
            </summary>
        </member>
        <member name="F:LibNoise.Writer.Heightmap16RawWriter._heightmap">
            <summary>
            The heightmap to write
            </summary>
        </member>
        <member name="M:LibNoise.Writer.Heightmap16RawWriter.WriteFile">
            <summary>
            Writes the contents of the heightmap into the file.
            
            @throw IOException An I/O exception occurred.
            
            Possibly the file could not be written.
            
            </summary>
            <param name="heightmap"></param>
        </member>
        <member name="P:LibNoise.Writer.Heightmap16RawWriter.Heightmap">
            <summary>
            Gets or sets the heightmap to write
            </summary>
        </member>
        <member name="T:LibNoise.Writer.Heightmap32RawWriter">
            <summary>
            Heightmap writer class, raw format.
            </summary>
        </member>
        <member name="F:LibNoise.Writer.Heightmap32RawWriter._heightmap">
            <summary>
            The heightmap to write
            </summary>
        </member>
        <member name="M:LibNoise.Writer.Heightmap32RawWriter.WriteFile">
            <summary>
            Writes the contents of the heightmap into the file.
            
            @throw IOException An I/O exception occurred.
            
            Possibly the file could not be written.
            
            </summary>
            <param name="heightmap"></param>
        </member>
        <member name="P:LibNoise.Writer.Heightmap32RawWriter.Heightmap">
            <summary>
            Gets or sets the heightmap to write
            </summary>
        </member>
        <member name="T:LibNoise.Writer.Heightmap8RawWriter">
            <summary>
            Heightmap writer class, raw format.
            </summary>
        </member>
        <member name="F:LibNoise.Writer.Heightmap8RawWriter._heightmap">
            <summary>
            The heightmap to write
            </summary>
        </member>
        <member name="M:LibNoise.Writer.Heightmap8RawWriter.WriteFile">
            <summary>
            Writes the contents of the heightmap into the file.
            
            @throw IOException An I/O exception occurred.
            
            Possibly the file could not be written.
            
            </summary>
            <param name="heightmap"></param>
        </member>
        <member name="P:LibNoise.Writer.Heightmap8RawWriter.Heightmap">
            <summary>
            Gets or sets the heightmap to write
            </summary>
        </member>
    </members>
</doc>
